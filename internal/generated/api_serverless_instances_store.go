// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_serverless_instances_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreateServerlessInstanceOperation, DeleteServerlessInstanceOperation, GetServerlessInstanceOperation, ListServerlessInstancesOperation, UpdateServerlessInstanceOperation

type CreateServerlessInstanceOperation interface {
	CreateServerlessInstance (*atlasv2.CreateServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error)
}

// CreateServerlessInstance encapsulates the logic to manage different cloud providers.
func (s *Store) CreateServerlessInstance(params *atlasv2.CreateServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error) {
	result, _, err := s.clientv2.ServerlessInstancesApi.CreateServerlessInstanceWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteServerlessInstanceOperation interface {
	DeleteServerlessInstance (*atlasv2.DeleteServerlessInstanceApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteServerlessInstance encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteServerlessInstance(params *atlasv2.DeleteServerlessInstanceApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ServerlessInstancesApi.DeleteServerlessInstanceWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetServerlessInstanceOperation interface {
	GetServerlessInstance (*atlasv2.GetServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error)
}

// GetServerlessInstance encapsulates the logic to manage different cloud providers.
func (s *Store) GetServerlessInstance(params *atlasv2.GetServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error) {
	result, _, err := s.clientv2.ServerlessInstancesApi.GetServerlessInstanceWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListServerlessInstancesOperation interface {
	ListServerlessInstances (*atlasv2.ListServerlessInstancesApiParams) (*atlasv2.PaginatedServerlessInstanceDescription, error)
}

// ListServerlessInstances encapsulates the logic to manage different cloud providers.
func (s *Store) ListServerlessInstances(params *atlasv2.ListServerlessInstancesApiParams) (*atlasv2.PaginatedServerlessInstanceDescription, error) {
	result, _, err := s.clientv2.ServerlessInstancesApi.ListServerlessInstancesWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateServerlessInstanceOperation interface {
	UpdateServerlessInstance (*atlasv2.UpdateServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error)
}

// UpdateServerlessInstance encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateServerlessInstance(params *atlasv2.UpdateServerlessInstanceApiParams) (*atlasv2.ServerlessInstanceDescription, error) {
	result, _, err := s.clientv2.ServerlessInstancesApi.UpdateServerlessInstanceWithParams(s.ctx, params).Execute()
	return &result, err
}


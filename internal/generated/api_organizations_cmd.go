// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateOrganizationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateOrganizationOperation
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateOrganizationOpts) Run() error {
	params := &atlasv2.CreateOrganizationApiParams{
	}
	resp, _, err := opts.store.CreateOrganization(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateOrganizationTemplate = "<<some template>>"

func CreateOrganizationBuilder() cobra.Command {
	opts := CreateOrganizationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateOrganizationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}

	return cmd
}
type CreateOrganizationInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateOrganizationInvitationOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateOrganizationInvitationOpts) Run() error {
	params := &atlasv2.CreateOrganizationInvitationApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.CreateOrganizationInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateOrganizationInvitationTemplate = "<<some template>>"

func CreateOrganizationInvitationBuilder() cobra.Command {
	opts := CreateOrganizationInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateOrganizationInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type DeleteOrganizationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteOrganizationOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteOrganizationOpts) Run() error {
	params := &atlasv2.DeleteOrganizationApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.DeleteOrganization(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteOrganizationTemplate = "<<some template>>"

func DeleteOrganizationBuilder() cobra.Command {
	opts := DeleteOrganizationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteOrganizationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type DeleteOrganizationInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteOrganizationInvitationOperation
	orgId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteOrganizationInvitationOpts) Run() error {
	params := &atlasv2.DeleteOrganizationInvitationApiParams{
		OrgId: opts.orgId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.DeleteOrganizationInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteOrganizationInvitationTemplate = "<<some template>>"

func DeleteOrganizationInvitationBuilder() cobra.Command {
	opts := DeleteOrganizationInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteOrganizationInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type GetOrganizationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetOrganizationOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetOrganizationOpts) Run() error {
	params := &atlasv2.GetOrganizationApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.GetOrganization(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetOrganizationTemplate = "<<some template>>"

func GetOrganizationBuilder() cobra.Command {
	opts := GetOrganizationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetOrganizationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type GetOrganizationInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetOrganizationInvitationOperation
	orgId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetOrganizationInvitationOpts) Run() error {
	params := &atlasv2.GetOrganizationInvitationApiParams{
		OrgId: opts.orgId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.GetOrganizationInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetOrganizationInvitationTemplate = "<<some template>>"

func GetOrganizationInvitationBuilder() cobra.Command {
	opts := GetOrganizationInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetOrganizationInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type GetOrganizationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetOrganizationSettingsOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetOrganizationSettingsOpts) Run() error {
	params := &atlasv2.GetOrganizationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.GetOrganizationSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetOrganizationSettingsTemplate = "<<some template>>"

func GetOrganizationSettingsBuilder() cobra.Command {
	opts := GetOrganizationSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetOrganizationSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type ListOrganizationInvitationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListOrganizationInvitationsOperation
	orgId string
	username string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListOrganizationInvitationsOpts) Run() error {
	params := &atlasv2.ListOrganizationInvitationsApiParams{
		OrgId: opts.orgId,
		Username: opts.username,
	}
	resp, _, err := opts.store.ListOrganizationInvitations(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationInvitationsTemplate = "<<some template>>"

func ListOrganizationInvitationsBuilder() cobra.Command {
	opts := ListOrganizationInvitationsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationInvitationsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}
type ListOrganizationProjectsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListOrganizationProjectsOperation
	orgId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	name string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListOrganizationProjectsOpts) Run() error {
	params := &atlasv2.ListOrganizationProjectsApiParams{
		OrgId: opts.orgId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		Name: opts.name,
	}
	resp, _, err := opts.store.ListOrganizationProjects(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationProjectsTemplate = "<<some template>>"

func ListOrganizationProjectsBuilder() cobra.Command {
	opts := ListOrganizationProjectsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationProjectsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.name, "name", "", "usage description")

	return cmd
}
type ListOrganizationUsersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListOrganizationUsersOperation
	orgId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListOrganizationUsersOpts) Run() error {
	params := &atlasv2.ListOrganizationUsersApiParams{
		OrgId: opts.orgId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListOrganizationUsers(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationUsersTemplate = "<<some template>>"

func ListOrganizationUsersBuilder() cobra.Command {
	opts := ListOrganizationUsersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationUsersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListOrganizationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListOrganizationsOperation
	includeCount bool
	itemsPerPage int32
	pageNum int32
	name string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListOrganizationsOpts) Run() error {
	params := &atlasv2.ListOrganizationsApiParams{
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		Name: opts.name,
	}
	resp, _, err := opts.store.ListOrganizations(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationsTemplate = "<<some template>>"

func ListOrganizationsBuilder() cobra.Command {
	opts := ListOrganizationsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.name, "name", "", "usage description")

	return cmd
}
type RenameOrganizationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RenameOrganizationOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RenameOrganizationOpts) Run() error {
	params := &atlasv2.RenameOrganizationApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.RenameOrganization(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const RenameOrganizationTemplate = "<<some template>>"

func RenameOrganizationBuilder() cobra.Command {
	opts := RenameOrganizationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RenameOrganizationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type UpdateOrganizationInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateOrganizationInvitationOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateOrganizationInvitationOpts) Run() error {
	params := &atlasv2.UpdateOrganizationInvitationApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.UpdateOrganizationInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateOrganizationInvitationTemplate = "<<some template>>"

func UpdateOrganizationInvitationBuilder() cobra.Command {
	opts := UpdateOrganizationInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateOrganizationInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type UpdateOrganizationInvitationByIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateOrganizationInvitationByIdOperation
	orgId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateOrganizationInvitationByIdOpts) Run() error {
	params := &atlasv2.UpdateOrganizationInvitationByIdApiParams{
		OrgId: opts.orgId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.UpdateOrganizationInvitationById(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateOrganizationInvitationByIdTemplate = "<<some template>>"

func UpdateOrganizationInvitationByIdBuilder() cobra.Command {
	opts := UpdateOrganizationInvitationByIdOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateOrganizationInvitationByIdTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type UpdateOrganizationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateOrganizationSettingsOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateOrganizationSettingsOpts) Run() error {
	params := &atlasv2.UpdateOrganizationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.UpdateOrganizationSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateOrganizationSettingsTemplate = "<<some template>>"

func UpdateOrganizationSettingsBuilder() cobra.Command {
	opts := UpdateOrganizationSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateOrganizationSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_data_lake_pipelines_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreatePipelineOperation, DeletePipelineOperation, DeletePipelineRunDatasetOperation, GetPipelineOperation, GetPipelineRunOperation, ListPipelineRunsOperation, ListPipelineSchedulesOperation, ListPipelineSnapshotsOperation, ListPipelinesOperation, PausePipelineOperation, ResumePipelineOperation, TriggerSnapshotIngestionOperation, UpdatePipelineOperation

type CreatePipelineOperation interface {
	CreatePipeline (*atlasv2.CreatePipelineApiParams) (*atlasv2.IngestionPipeline, error)
}

// CreatePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) CreatePipeline(params *atlasv2.CreatePipelineApiParams) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.CreatePipelineWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeletePipelineOperation interface {
	DeletePipeline (*atlasv2.DeletePipelineApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeletePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) DeletePipeline(params *atlasv2.DeletePipelineApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.DeletePipelineWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeletePipelineRunDatasetOperation interface {
	DeletePipelineRunDataset (*atlasv2.DeletePipelineRunDatasetApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeletePipelineRunDataset encapsulates the logic to manage different cloud providers.
func (s *Store) DeletePipelineRunDataset(params *atlasv2.DeletePipelineRunDatasetApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.DeletePipelineRunDatasetWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetPipelineOperation interface {
	GetPipeline (*atlasv2.GetPipelineApiParams) (*atlasv2.IngestionPipeline, error)
}

// GetPipeline encapsulates the logic to manage different cloud providers.
func (s *Store) GetPipeline(params *atlasv2.GetPipelineApiParams) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.GetPipelineWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetPipelineRunOperation interface {
	GetPipelineRun (*atlasv2.GetPipelineRunApiParams) (*atlasv2.IngestionPipelineRun, error)
}

// GetPipelineRun encapsulates the logic to manage different cloud providers.
func (s *Store) GetPipelineRun(params *atlasv2.GetPipelineRunApiParams) (*atlasv2.IngestionPipelineRun, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.GetPipelineRunWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPipelineRunsOperation interface {
	ListPipelineRuns (*atlasv2.ListPipelineRunsApiParams) (*atlasv2.PaginatedPipelineRun, error)
}

// ListPipelineRuns encapsulates the logic to manage different cloud providers.
func (s *Store) ListPipelineRuns(params *atlasv2.ListPipelineRunsApiParams) (*atlasv2.PaginatedPipelineRun, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelineRunsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPipelineSchedulesOperation interface {
	ListPipelineSchedules (*atlasv2.ListPipelineSchedulesApiParams) (*atlasv2.[]PolicyItem, error)
}

// ListPipelineSchedules encapsulates the logic to manage different cloud providers.
func (s *Store) ListPipelineSchedules(params *atlasv2.ListPipelineSchedulesApiParams) (*atlasv2.[]PolicyItem, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelineSchedulesWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPipelineSnapshotsOperation interface {
	ListPipelineSnapshots (*atlasv2.ListPipelineSnapshotsApiParams) (*atlasv2.PaginatedBackupSnapshot, error)
}

// ListPipelineSnapshots encapsulates the logic to manage different cloud providers.
func (s *Store) ListPipelineSnapshots(params *atlasv2.ListPipelineSnapshotsApiParams) (*atlasv2.PaginatedBackupSnapshot, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelineSnapshotsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPipelinesOperation interface {
	ListPipelines (*atlasv2.ListPipelinesApiParams) (*atlasv2.[]IngestionPipeline, error)
}

// ListPipelines encapsulates the logic to manage different cloud providers.
func (s *Store) ListPipelines(params *atlasv2.ListPipelinesApiParams) (*atlasv2.[]IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelinesWithParams(s.ctx, params).Execute()
	return &result, err
}

type PausePipelineOperation interface {
	PausePipeline (*atlasv2.PausePipelineApiParams) (*atlasv2.IngestionPipeline, error)
}

// PausePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) PausePipeline(params *atlasv2.PausePipelineApiParams) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.PausePipelineWithParams(s.ctx, params).Execute()
	return &result, err
}

type ResumePipelineOperation interface {
	ResumePipeline (*atlasv2.ResumePipelineApiParams) (*atlasv2.IngestionPipeline, error)
}

// ResumePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) ResumePipeline(params *atlasv2.ResumePipelineApiParams) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ResumePipelineWithParams(s.ctx, params).Execute()
	return &result, err
}

type TriggerSnapshotIngestionOperation interface {
	TriggerSnapshotIngestion (*atlasv2.TriggerSnapshotIngestionApiParams) (*atlasv2.IngestionPipelineRun, error)
}

// TriggerSnapshotIngestion encapsulates the logic to manage different cloud providers.
func (s *Store) TriggerSnapshotIngestion(params *atlasv2.TriggerSnapshotIngestionApiParams) (*atlasv2.IngestionPipelineRun, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.TriggerSnapshotIngestionWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdatePipelineOperation interface {
	UpdatePipeline (*atlasv2.UpdatePipelineApiParams) (*atlasv2.IngestionPipeline, error)
}

// UpdatePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) UpdatePipeline(params *atlasv2.UpdatePipelineApiParams) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.UpdatePipelineWithParams(s.ctx, params).Execute()
	return &result, err
}


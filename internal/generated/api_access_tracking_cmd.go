// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type ListAccessLogsByClusterNameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListAccessLogsByClusterNameOperation
	groupId string
	clusterName string
	authResult bool
	end int64
	ipAddress string
	nLogs int32
	start int64
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListAccessLogsByClusterNameOpts) Run() error {
	params := &atlasv2.ListAccessLogsByClusterNameApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		AuthResult: opts.authResult,
		End: opts.end,
		IpAddress: opts.ipAddress,
		NLogs: opts.nLogs,
		Start: opts.start,
	}
	resp, _, err := opts.store.ListAccessLogsByClusterName(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAccessLogsByClusterNameTemplate = "<<some template>>"

func ListAccessLogsByClusterNameBuilder() cobra.Command {
	opts := ListAccessLogsByClusterNameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAccessLogsByClusterNameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.authResult, "authResult", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")
	cmd.Flags().StringVar(&opts.ipAddress, "ipAddress", "", "usage description")
	cmd.Flags().StringVar(&opts.nLogs, "nLogs", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")

	return cmd
}
type ListAccessLogsByHostnameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListAccessLogsByHostnameOperation
	groupId string
	hostname string
	authResult bool
	end int64
	ipAddress string
	nLogs int32
	start int64
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListAccessLogsByHostnameOpts) Run() error {
	params := &atlasv2.ListAccessLogsByHostnameApiParams{
		GroupId: opts.groupId,
		Hostname: opts.hostname,
		AuthResult: opts.authResult,
		End: opts.end,
		IpAddress: opts.ipAddress,
		NLogs: opts.nLogs,
		Start: opts.start,
	}
	resp, _, err := opts.store.ListAccessLogsByHostname(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAccessLogsByHostnameTemplate = "<<some template>>"

func ListAccessLogsByHostnameBuilder() cobra.Command {
	opts := ListAccessLogsByHostnameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAccessLogsByHostnameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.hostname, "hostname", "", "usage description")
	cmd.Flags().StringVar(&opts.authResult, "authResult", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")
	cmd.Flags().StringVar(&opts.ipAddress, "ipAddress", "", "usage description")
	cmd.Flags().StringVar(&opts.nLogs, "nLogs", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")

	return cmd
}

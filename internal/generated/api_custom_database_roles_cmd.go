// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateCustomDatabaseRoleOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateCustomDatabaseRoleOpts) Run() error {
	params := &atlasv2.CreateCustomDatabaseRoleApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateCustomDatabaseRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateCustomDatabaseRoleTemplate = "<<some template>>"

func CreateCustomDatabaseRoleBuilder() cobra.Command {
	opts := CreateCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateCustomDatabaseRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeleteCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteCustomDatabaseRoleOperation
	groupId string
	roleName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteCustomDatabaseRoleOpts) Run() error {
	params := &atlasv2.DeleteCustomDatabaseRoleApiParams{
		GroupId: opts.groupId,
		RoleName: opts.roleName,
	}
	_, err := opts.store.DeleteCustomDatabaseRole(params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DeleteCustomDatabaseRoleTemplate = "<<some template>>"

func DeleteCustomDatabaseRoleBuilder() cobra.Command {
	opts := DeleteCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteCustomDatabaseRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", "usage description")

	return cmd
}
type GetCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetCustomDatabaseRoleOperation
	groupId string
	roleName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetCustomDatabaseRoleOpts) Run() error {
	params := &atlasv2.GetCustomDatabaseRoleApiParams{
		GroupId: opts.groupId,
		RoleName: opts.roleName,
	}
	resp, _, err := opts.store.GetCustomDatabaseRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetCustomDatabaseRoleTemplate = "<<some template>>"

func GetCustomDatabaseRoleBuilder() cobra.Command {
	opts := GetCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetCustomDatabaseRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", "usage description")

	return cmd
}
type ListCustomDatabaseRolesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListCustomDatabaseRolesOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListCustomDatabaseRolesOpts) Run() error {
	params := &atlasv2.ListCustomDatabaseRolesApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.ListCustomDatabaseRoles(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListCustomDatabaseRolesTemplate = "<<some template>>"

func ListCustomDatabaseRolesBuilder() cobra.Command {
	opts := ListCustomDatabaseRolesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListCustomDatabaseRolesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpdateCustomDatabaseRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateCustomDatabaseRoleOperation
	groupId string
	roleName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateCustomDatabaseRoleOpts) Run() error {
	params := &atlasv2.UpdateCustomDatabaseRoleApiParams{
		GroupId: opts.groupId,
		RoleName: opts.roleName,
	}
	resp, _, err := opts.store.UpdateCustomDatabaseRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateCustomDatabaseRoleTemplate = "<<some template>>"

func UpdateCustomDatabaseRoleBuilder() cobra.Command {
	opts := UpdateCustomDatabaseRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateCustomDatabaseRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.roleName, "roleName", "", "usage description")

	return cmd
}

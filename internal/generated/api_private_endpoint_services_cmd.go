// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreatePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreatePrivateEndpointOperation
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreatePrivateEndpointOpts) Run() error {
	params := &atlasv2.CreatePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.store.CreatePrivateEndpoint(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePrivateEndpointTemplate = "<<some template>>"

func CreatePrivateEndpointBuilder() cobra.Command {
	opts := CreatePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")

	return cmd
}
type CreatePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreatePrivateEndpointServiceOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreatePrivateEndpointServiceOpts) Run() error {
	params := &atlasv2.CreatePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreatePrivateEndpointService(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePrivateEndpointServiceTemplate = "<<some template>>"

func CreatePrivateEndpointServiceBuilder() cobra.Command {
	opts := CreatePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeletePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeletePrivateEndpointOperation
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeletePrivateEndpointOpts) Run() error {
	params := &atlasv2.DeletePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.store.DeletePrivateEndpoint(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePrivateEndpointTemplate = "<<some template>>"

func DeletePrivateEndpointBuilder() cobra.Command {
	opts := DeletePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")

	return cmd
}
type DeletePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeletePrivateEndpointServiceOperation
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeletePrivateEndpointServiceOpts) Run() error {
	params := &atlasv2.DeletePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.store.DeletePrivateEndpointService(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePrivateEndpointServiceTemplate = "<<some template>>"

func DeletePrivateEndpointServiceBuilder() cobra.Command {
	opts := DeletePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")

	return cmd
}
type GetPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetPrivateEndpointOperation
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetPrivateEndpointOpts) Run() error {
	params := &atlasv2.GetPrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.store.GetPrivateEndpoint(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPrivateEndpointTemplate = "<<some template>>"

func GetPrivateEndpointBuilder() cobra.Command {
	opts := GetPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")

	return cmd
}
type GetPrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetPrivateEndpointServiceOperation
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetPrivateEndpointServiceOpts) Run() error {
	params := &atlasv2.GetPrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.store.GetPrivateEndpointService(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPrivateEndpointServiceTemplate = "<<some template>>"

func GetPrivateEndpointServiceBuilder() cobra.Command {
	opts := GetPrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")

	return cmd
}
type GetRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetRegionalizedPrivateEndpointSettingOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetRegionalizedPrivateEndpointSettingOpts) Run() error {
	params := &atlasv2.GetRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.GetRegionalizedPrivateEndpointSetting(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetRegionalizedPrivateEndpointSettingTemplate = "<<some template>>"

func GetRegionalizedPrivateEndpointSettingBuilder() cobra.Command {
	opts := GetRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetRegionalizedPrivateEndpointSettingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type ListPrivateEndpointServicesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListPrivateEndpointServicesOperation
	groupId string
	cloudProvider string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListPrivateEndpointServicesOpts) Run() error {
	params := &atlasv2.ListPrivateEndpointServicesApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
	}
	resp, _, err := opts.store.ListPrivateEndpointServices(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListPrivateEndpointServicesTemplate = "<<some template>>"

func ListPrivateEndpointServicesBuilder() cobra.Command {
	opts := ListPrivateEndpointServicesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListPrivateEndpointServicesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")

	return cmd
}
type ToggleRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ToggleRegionalizedPrivateEndpointSettingOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ToggleRegionalizedPrivateEndpointSettingOpts) Run() error {
	params := &atlasv2.ToggleRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.ToggleRegionalizedPrivateEndpointSetting(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ToggleRegionalizedPrivateEndpointSettingTemplate = "<<some template>>"

func ToggleRegionalizedPrivateEndpointSettingBuilder() cobra.Command {
	opts := ToggleRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ToggleRegionalizedPrivateEndpointSettingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

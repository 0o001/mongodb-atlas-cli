// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreatePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *CreatePrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreatePrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.CreatePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.CreatePrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func CreatePrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := CreatePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Create One Private Endpoint for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint.")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", , "Unique 24-hexadecimal digit string that identifies the private endpoint service for which you want to create a private endpoint.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type CreatePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
}

func (opts *CreatePrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreatePrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.CreatePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.CreatePrivateEndpointServiceWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func CreatePrivateEndpointServiceBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := CreatePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Create One Private Endpoint Service for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")

	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type DeletePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *DeletePrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeletePrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.DeletePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.DeletePrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func DeletePrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DeletePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Remove One Private Endpoint for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint.")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", , "Unique string that identifies the private endpoint you want to delete. The format of the **endpointId** parameter differs for AWS and Azure. You must URL encode the **endpointId** for Azure private endpoints.")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", , "Unique 24-hexadecimal digit string that identifies the private endpoint service from which you want to delete a private endpoint.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")
	_ = cmd.MarkFlagRequired("endpointId")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type DeletePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *DeletePrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeletePrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.DeletePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.DeletePrivateEndpointServiceWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func DeletePrivateEndpointServiceBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DeletePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Remove One Private Endpoint Service for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint service.")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", , "Unique 24-hexadecimal digit string that identifies the private endpoint service that you want to delete.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *GetPrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.GetPrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Return One Private Endpoint for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint.")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", , "Unique string that identifies the private endpoint you want to return. The format of the **endpointId** parameter differs for AWS and Azure. You must URL encode the **endpointId** for Azure private endpoints.")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", , "Unique 24-hexadecimal digit string that identifies the private endpoint service for which you want to return a private endpoint.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")
	_ = cmd.MarkFlagRequired("endpointId")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetPrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *GetPrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetPrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.GetPrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetPrivateEndpointServiceWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetPrivateEndpointServiceBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetPrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Return One Private Endpoint Service for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint service.")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", , "Unique 24-hexadecimal digit string that identifies the private endpoint service that you want to return.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
}

func (opts *GetRegionalizedPrivateEndpointSettingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetRegionalizedPrivateEndpointSettingOpts) Run(ctx context.Context) error {
	params := &admin.GetRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetRegionalizedPrivateEndpointSettingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetRegionalizedPrivateEndpointSettingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Return Regionalized Private Endpoint Status",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")

	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type ListPrivateEndpointServicesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	cloudProvider string
}

func (opts *ListPrivateEndpointServicesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListPrivateEndpointServicesOpts) Run(ctx context.Context) error {
	params := &admin.ListPrivateEndpointServicesApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.ListPrivateEndpointServicesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListPrivateEndpointServicesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListPrivateEndpointServicesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Return All Private Endpoint Services for One Provider",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", &quot;AWS&quot;, "Cloud service provider that manages this private endpoint service.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("cloudProvider")

	return cmd
}
type ToggleRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
}

func (opts *ToggleRegionalizedPrivateEndpointSettingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ToggleRegionalizedPrivateEndpointSettingOpts) Run(ctx context.Context) error {
	params := &admin.ToggleRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.ToggleRegionalizedPrivateEndpointSettingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ToggleRegionalizedPrivateEndpointSettingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ToggleRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		// Aliases: []string{"?"},
		Short:   "Toggle Regionalized Private Endpoint Status",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", , "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")

	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}

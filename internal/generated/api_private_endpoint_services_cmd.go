// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreatePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *CreatePrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreatePrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.CreatePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.CreatePrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePrivateEndpointTemplate = "<<some template>>"

func CreatePrivateEndpointBuilder() cobra.Command {
	opts := CreatePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type CreatePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *CreatePrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreatePrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.CreatePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.CreatePrivateEndpointServiceWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePrivateEndpointServiceTemplate = "<<some template>>"

func CreatePrivateEndpointServiceBuilder() cobra.Command {
	opts := CreatePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type DeletePrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *DeletePrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeletePrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.DeletePrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.DeletePrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePrivateEndpointTemplate = "<<some template>>"

func DeletePrivateEndpointBuilder() cobra.Command {
	opts := DeletePrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointId")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type DeletePrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *DeletePrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeletePrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.DeletePrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.DeletePrivateEndpointServiceWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePrivateEndpointServiceTemplate = "<<some template>>"

func DeletePrivateEndpointServiceBuilder() cobra.Command {
	opts := DeletePrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
	endpointId string
	endpointServiceId string
}

func (opts *GetPrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.GetPrivateEndpointApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointId: opts.endpointId,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetPrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPrivateEndpointTemplate = "<<some template>>"

func GetPrivateEndpointBuilder() cobra.Command {
	opts := GetPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointId")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetPrivateEndpointServiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
	endpointServiceId string
}

func (opts *GetPrivateEndpointServiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetPrivateEndpointServiceOpts) Run(ctx context.Context) error {
	params := &admin.GetPrivateEndpointServiceApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		EndpointServiceId: opts.endpointServiceId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetPrivateEndpointServiceWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPrivateEndpointServiceTemplate = "<<some template>>"

func GetPrivateEndpointServiceBuilder() cobra.Command {
	opts := GetPrivateEndpointServiceOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPrivateEndpointServiceTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")
	cmd.Flags().StringVar(&opts.endpointServiceId, "endpointServiceId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointServiceId")

	return cmd
}
type GetRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *GetRegionalizedPrivateEndpointSettingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetRegionalizedPrivateEndpointSettingOpts) Run(ctx context.Context) error {
	params := &admin.GetRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.GetRegionalizedPrivateEndpointSettingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetRegionalizedPrivateEndpointSettingTemplate = "<<some template>>"

func GetRegionalizedPrivateEndpointSettingBuilder() cobra.Command {
	opts := GetRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetRegionalizedPrivateEndpointSettingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type ListPrivateEndpointServicesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	cloudProvider string
}

func (opts *ListPrivateEndpointServicesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListPrivateEndpointServicesOpts) Run(ctx context.Context) error {
	params := &admin.ListPrivateEndpointServicesApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.ListPrivateEndpointServicesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListPrivateEndpointServicesTemplate = "<<some template>>"

func ListPrivateEndpointServicesBuilder() cobra.Command {
	opts := ListPrivateEndpointServicesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListPrivateEndpointServicesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	_ = cmd.MarkFlagRequired("cloudProvider")

	return cmd
}
type ToggleRegionalizedPrivateEndpointSettingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *ToggleRegionalizedPrivateEndpointSettingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ToggleRegionalizedPrivateEndpointSettingOpts) Run(ctx context.Context) error {
	params := &admin.ToggleRegionalizedPrivateEndpointSettingApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.PrivateEndpointServicesApi.ToggleRegionalizedPrivateEndpointSettingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ToggleRegionalizedPrivateEndpointSettingTemplate = "<<some template>>"

func ToggleRegionalizedPrivateEndpointSettingBuilder() cobra.Command {
	opts := ToggleRegionalizedPrivateEndpointSettingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ToggleRegionalizedPrivateEndpointSettingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type GetAtlasProcessOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetAtlasProcessOperation
	groupId string
	processId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetAtlasProcessOpts) Run() error {
	params := &atlasv2.GetAtlasProcessApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
	}
	resp, _, err := opts.store.GetAtlasProcess(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetAtlasProcessTemplate = "<<some template>>"

func GetAtlasProcessBuilder() cobra.Command {
	opts := GetAtlasProcessOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetAtlasProcessTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")

	return cmd
}
type GetDatabaseOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetDatabaseOperation
	groupId string
	databaseName string
	processId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetDatabaseOpts) Run() error {
	params := &atlasv2.GetDatabaseApiParams{
		GroupId: opts.groupId,
		DatabaseName: opts.databaseName,
		ProcessId: opts.processId,
	}
	resp, _, err := opts.store.GetDatabase(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDatabaseTemplate = "<<some template>>"

func GetDatabaseBuilder() cobra.Command {
	opts := GetDatabaseOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDatabaseTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")

	return cmd
}
type GetDatabaseMeasurementsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetDatabaseMeasurementsOperation
	groupId string
	databaseName string
	processId string
	m []string
	granularity string
	period string
	start time.Time
	end time.Time
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetDatabaseMeasurementsOpts) Run() error {
	params := &atlasv2.GetDatabaseMeasurementsApiParams{
		GroupId: opts.groupId,
		DatabaseName: opts.databaseName,
		ProcessId: opts.processId,
		M: opts.m,
		Granularity: opts.granularity,
		Period: opts.period,
		Start: opts.start,
		End: opts.end,
	}
	resp, _, err := opts.store.GetDatabaseMeasurements(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDatabaseMeasurementsTemplate = "<<some template>>"

func GetDatabaseMeasurementsBuilder() cobra.Command {
	opts := GetDatabaseMeasurementsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDatabaseMeasurementsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.m, "m", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")

	return cmd
}
type GetDiskMeasurementsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetDiskMeasurementsOperation
	groupId string
	partitionName string
	processId string
	m []string
	granularity string
	period string
	start time.Time
	end time.Time
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetDiskMeasurementsOpts) Run() error {
	params := &atlasv2.GetDiskMeasurementsApiParams{
		GroupId: opts.groupId,
		PartitionName: opts.partitionName,
		ProcessId: opts.processId,
		M: opts.m,
		Granularity: opts.granularity,
		Period: opts.period,
		Start: opts.start,
		End: opts.end,
	}
	resp, _, err := opts.store.GetDiskMeasurements(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDiskMeasurementsTemplate = "<<some template>>"

func GetDiskMeasurementsBuilder() cobra.Command {
	opts := GetDiskMeasurementsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDiskMeasurementsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.partitionName, "partitionName", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.m, "m", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")

	return cmd
}
type GetHostLogsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetHostLogsOperation
	groupId string
	hostName string
	logName string
	endDate int64
	startDate int64
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetHostLogsOpts) Run() error {
	params := &atlasv2.GetHostLogsApiParams{
		GroupId: opts.groupId,
		HostName: opts.hostName,
		LogName: opts.logName,
		EndDate: opts.endDate,
		StartDate: opts.startDate,
	}
	resp, _, err := opts.store.GetHostLogs(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetHostLogsTemplate = "<<some template>>"

func GetHostLogsBuilder() cobra.Command {
	opts := GetHostLogsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetHostLogsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.hostName, "hostName", "", "usage description")
	cmd.Flags().StringVar(&opts.logName, "logName", "", "usage description")
	cmd.Flags().StringVar(&opts.endDate, "endDate", "", "usage description")
	cmd.Flags().StringVar(&opts.startDate, "startDate", "", "usage description")

	return cmd
}
type GetHostMeasurementsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetHostMeasurementsOperation
	groupId string
	processId string
	m []string
	period string
	granularity string
	start time.Time
	end time.Time
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetHostMeasurementsOpts) Run() error {
	params := &atlasv2.GetHostMeasurementsApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		M: opts.m,
		Period: opts.period,
		Granularity: opts.granularity,
		Start: opts.start,
		End: opts.end,
	}
	resp, _, err := opts.store.GetHostMeasurements(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetHostMeasurementsTemplate = "<<some template>>"

func GetHostMeasurementsBuilder() cobra.Command {
	opts := GetHostMeasurementsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetHostMeasurementsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.m, "m", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")

	return cmd
}
type GetIndexMetricsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetIndexMetricsOperation
	processId string
	indexName string
	databaseName string
	collectionName string
	groupId string
	granularity string
	period string
	start time.Time
	end time.Time
	metrics []string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetIndexMetricsOpts) Run() error {
	params := &atlasv2.GetIndexMetricsApiParams{
		ProcessId: opts.processId,
		IndexName: opts.indexName,
		DatabaseName: opts.databaseName,
		CollectionName: opts.collectionName,
		GroupId: opts.groupId,
		Granularity: opts.granularity,
		Period: opts.period,
		Start: opts.start,
		End: opts.end,
		Metrics: opts.metrics,
	}
	resp, _, err := opts.store.GetIndexMetrics(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetIndexMetricsTemplate = "<<some template>>"

func GetIndexMetricsBuilder() cobra.Command {
	opts := GetIndexMetricsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetIndexMetricsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.indexName, "indexName", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.collectionName, "collectionName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")
	cmd.Flags().StringVar(&opts.metrics, "metrics", "", "usage description")

	return cmd
}
type GetMeasurementsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetMeasurementsOperation
	processId string
	groupId string
	granularity string
	period string
	start time.Time
	end time.Time
	metrics []string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetMeasurementsOpts) Run() error {
	params := &atlasv2.GetMeasurementsApiParams{
		ProcessId: opts.processId,
		GroupId: opts.groupId,
		Granularity: opts.granularity,
		Period: opts.period,
		Start: opts.start,
		End: opts.end,
		Metrics: opts.metrics,
	}
	resp, _, err := opts.store.GetMeasurements(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetMeasurementsTemplate = "<<some template>>"

func GetMeasurementsBuilder() cobra.Command {
	opts := GetMeasurementsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetMeasurementsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")
	cmd.Flags().StringVar(&opts.metrics, "metrics", "", "usage description")

	return cmd
}
type ListAtlasProcessesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListAtlasProcessesOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListAtlasProcessesOpts) Run() error {
	params := &atlasv2.ListAtlasProcessesApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListAtlasProcesses(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAtlasProcessesTemplate = "<<some template>>"

func ListAtlasProcessesBuilder() cobra.Command {
	opts := ListAtlasProcessesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAtlasProcessesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListDatabasesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListDatabasesOperation
	groupId string
	processId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListDatabasesOpts) Run() error {
	params := &atlasv2.ListDatabasesApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListDatabases(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListDatabasesTemplate = "<<some template>>"

func ListDatabasesBuilder() cobra.Command {
	opts := ListDatabasesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListDatabasesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListDiskMeasurementsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListDiskMeasurementsOperation
	partitionName string
	groupId string
	processId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListDiskMeasurementsOpts) Run() error {
	params := &atlasv2.ListDiskMeasurementsApiParams{
		PartitionName: opts.partitionName,
		GroupId: opts.groupId,
		ProcessId: opts.processId,
	}
	resp, _, err := opts.store.ListDiskMeasurements(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListDiskMeasurementsTemplate = "<<some template>>"

func ListDiskMeasurementsBuilder() cobra.Command {
	opts := ListDiskMeasurementsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListDiskMeasurementsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.partitionName, "partitionName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")

	return cmd
}
type ListDiskPartitionsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListDiskPartitionsOperation
	groupId string
	processId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListDiskPartitionsOpts) Run() error {
	params := &atlasv2.ListDiskPartitionsApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListDiskPartitions(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListDiskPartitionsTemplate = "<<some template>>"

func ListDiskPartitionsBuilder() cobra.Command {
	opts := ListDiskPartitionsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListDiskPartitionsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListIndexMetricsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListIndexMetricsOperation
	processId string
	databaseName string
	collectionName string
	groupId string
	granularity string
	period string
	start time.Time
	end time.Time
	metrics []string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListIndexMetricsOpts) Run() error {
	params := &atlasv2.ListIndexMetricsApiParams{
		ProcessId: opts.processId,
		DatabaseName: opts.databaseName,
		CollectionName: opts.collectionName,
		GroupId: opts.groupId,
		Granularity: opts.granularity,
		Period: opts.period,
		Start: opts.start,
		End: opts.end,
		Metrics: opts.metrics,
	}
	resp, _, err := opts.store.ListIndexMetrics(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListIndexMetricsTemplate = "<<some template>>"

func ListIndexMetricsBuilder() cobra.Command {
	opts := ListIndexMetricsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListIndexMetricsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.collectionName, "collectionName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.granularity, "granularity", "", "usage description")
	cmd.Flags().StringVar(&opts.period, "period", "", "usage description")
	cmd.Flags().StringVar(&opts.start, "start", "", "usage description")
	cmd.Flags().StringVar(&opts.end, "end", "", "usage description")
	cmd.Flags().StringVar(&opts.metrics, "metrics", "", "usage description")

	return cmd
}
type ListMetricTypesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListMetricTypesOperation
	processId string
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListMetricTypesOpts) Run() error {
	params := &atlasv2.ListMetricTypesApiParams{
		ProcessId: opts.processId,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.ListMetricTypes(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListMetricTypesTemplate = "<<some template>>"

func ListMetricTypesBuilder() cobra.Command {
	opts := ListMetricTypesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListMetricTypesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

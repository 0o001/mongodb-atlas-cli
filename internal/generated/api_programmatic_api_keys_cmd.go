// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type AddProjectApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.AddProjectApiKeyOperation
	groupId string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *AddProjectApiKeyOpts) Run() error {
	params := &atlasv2.AddProjectApiKeyApiParams{
		GroupId: opts.groupId,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.AddProjectApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const AddProjectApiKeyTemplate = "<<some template>>"

func AddProjectApiKeyBuilder() cobra.Command {
	opts := AddProjectApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), AddProjectApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type CreateApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateApiKeyOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateApiKeyOpts) Run() error {
	params := &atlasv2.CreateApiKeyApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.CreateApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateApiKeyTemplate = "<<some template>>"

func CreateApiKeyBuilder() cobra.Command {
	opts := CreateApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type CreateApiKeyAccessListOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateApiKeyAccessListOperation
	orgId string
	apiUserId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateApiKeyAccessListOpts) Run() error {
	params := &atlasv2.CreateApiKeyAccessListApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.CreateApiKeyAccessList(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateApiKeyAccessListTemplate = "<<some template>>"

func CreateApiKeyAccessListBuilder() cobra.Command {
	opts := CreateApiKeyAccessListOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateApiKeyAccessListTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type CreateProjectApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateProjectApiKeyOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateProjectApiKeyOpts) Run() error {
	params := &atlasv2.CreateProjectApiKeyApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateProjectApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectApiKeyTemplate = "<<some template>>"

func CreateProjectApiKeyBuilder() cobra.Command {
	opts := CreateProjectApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeleteApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteApiKeyOperation
	orgId string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteApiKeyOpts) Run() error {
	params := &atlasv2.DeleteApiKeyApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.DeleteApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteApiKeyTemplate = "<<some template>>"

func DeleteApiKeyBuilder() cobra.Command {
	opts := DeleteApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type DeleteApiKeyAccessListEntryOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteApiKeyAccessListEntryOperation
	orgId string
	apiUserId string
	ipAddress string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteApiKeyAccessListEntryOpts) Run() error {
	params := &atlasv2.DeleteApiKeyAccessListEntryApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
		IpAddress: opts.ipAddress,
	}
	resp, _, err := opts.store.DeleteApiKeyAccessListEntry(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteApiKeyAccessListEntryTemplate = "<<some template>>"

func DeleteApiKeyAccessListEntryBuilder() cobra.Command {
	opts := DeleteApiKeyAccessListEntryOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteApiKeyAccessListEntryTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")
	cmd.Flags().StringVar(&opts.ipAddress, "ipAddress", "", "usage description")

	return cmd
}
type GetApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetApiKeyOperation
	orgId string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetApiKeyOpts) Run() error {
	params := &atlasv2.GetApiKeyApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.GetApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetApiKeyTemplate = "<<some template>>"

func GetApiKeyBuilder() cobra.Command {
	opts := GetApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type GetApiKeyAccessListOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetApiKeyAccessListOperation
	orgId string
	ipAddress string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetApiKeyAccessListOpts) Run() error {
	params := &atlasv2.GetApiKeyAccessListApiParams{
		OrgId: opts.orgId,
		IpAddress: opts.ipAddress,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.GetApiKeyAccessList(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetApiKeyAccessListTemplate = "<<some template>>"

func GetApiKeyAccessListBuilder() cobra.Command {
	opts := GetApiKeyAccessListOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetApiKeyAccessListTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.ipAddress, "ipAddress", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type ListApiKeyAccessListsEntriesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListApiKeyAccessListsEntriesOperation
	orgId string
	apiUserId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListApiKeyAccessListsEntriesOpts) Run() error {
	params := &atlasv2.ListApiKeyAccessListsEntriesApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListApiKeyAccessListsEntries(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListApiKeyAccessListsEntriesTemplate = "<<some template>>"

func ListApiKeyAccessListsEntriesBuilder() cobra.Command {
	opts := ListApiKeyAccessListsEntriesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListApiKeyAccessListsEntriesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListApiKeysOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListApiKeysOperation
	orgId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListApiKeysOpts) Run() error {
	params := &atlasv2.ListApiKeysApiParams{
		OrgId: opts.orgId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListApiKeys(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListApiKeysTemplate = "<<some template>>"

func ListApiKeysBuilder() cobra.Command {
	opts := ListApiKeysOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListApiKeysTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListProjectApiKeysOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectApiKeysOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectApiKeysOpts) Run() error {
	params := &atlasv2.ListProjectApiKeysApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListProjectApiKeys(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectApiKeysTemplate = "<<some template>>"

func ListProjectApiKeysBuilder() cobra.Command {
	opts := ListProjectApiKeysOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectApiKeysTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type RemoveProjectApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RemoveProjectApiKeyOperation
	groupId string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RemoveProjectApiKeyOpts) Run() error {
	params := &atlasv2.RemoveProjectApiKeyApiParams{
		GroupId: opts.groupId,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.RemoveProjectApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const RemoveProjectApiKeyTemplate = "<<some template>>"

func RemoveProjectApiKeyBuilder() cobra.Command {
	opts := RemoveProjectApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveProjectApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type UpdateApiKeyOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateApiKeyOperation
	orgId string
	apiUserId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateApiKeyOpts) Run() error {
	params := &atlasv2.UpdateApiKeyApiParams{
		OrgId: opts.orgId,
		ApiUserId: opts.apiUserId,
	}
	resp, _, err := opts.store.UpdateApiKey(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateApiKeyTemplate = "<<some template>>"

func UpdateApiKeyBuilder() cobra.Command {
	opts := UpdateApiKeyOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateApiKeyTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")

	return cmd
}
type UpdateApiKeyRolesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateApiKeyRolesOperation
	groupId string
	apiUserId string
	pageNum int32
	itemsPerPage int32
	includeCount bool
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateApiKeyRolesOpts) Run() error {
	params := &atlasv2.UpdateApiKeyRolesApiParams{
		GroupId: opts.groupId,
		ApiUserId: opts.apiUserId,
		PageNum: opts.pageNum,
		ItemsPerPage: opts.itemsPerPage,
		IncludeCount: opts.includeCount,
	}
	resp, _, err := opts.store.UpdateApiKeyRoles(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateApiKeyRolesTemplate = "<<some template>>"

func UpdateApiKeyRolesBuilder() cobra.Command {
	opts := UpdateApiKeyRolesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateApiKeyRolesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.apiUserId, "apiUserId", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")

	return cmd
}

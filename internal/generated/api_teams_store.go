// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_teams_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas AddAllTeamsToProjectOperation, AddTeamUserOperation, CreateTeamOperation, DeleteTeamOperation, GetTeamByIdOperation, GetTeamByNameOperation, ListOrganizationTeamsOperation, ListProjectTeamsOperation, ListTeamUsersOperation, RemoveProjectTeamOperation, RemoveTeamUserOperation, RenameTeamOperation, UpdateTeamRolesOperation

type AddAllTeamsToProjectOperation interface {
	AddAllTeamsToProject (*atlasv2.AddAllTeamsToProjectApiParams) (*atlasv2.PaginatedTeamRole, error)
}

// AddAllTeamsToProject encapsulates the logic to manage different cloud providers.
func (s *Store) AddAllTeamsToProject(params *atlasv2.AddAllTeamsToProjectApiParams) (*atlasv2.PaginatedTeamRole, error) {
	result, _, err := s.clientv2.TeamsApi.AddAllTeamsToProjectWithParams(s.ctx, params).Execute()
	return &result, err
}

type AddTeamUserOperation interface {
	AddTeamUser (*atlasv2.AddTeamUserApiParams) (*atlasv2.PaginatedApiAppUser, error)
}

// AddTeamUser encapsulates the logic to manage different cloud providers.
func (s *Store) AddTeamUser(params *atlasv2.AddTeamUserApiParams) (*atlasv2.PaginatedApiAppUser, error) {
	result, _, err := s.clientv2.TeamsApi.AddTeamUserWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateTeamOperation interface {
	CreateTeam (*atlasv2.CreateTeamApiParams) (*atlasv2.Team, error)
}

// CreateTeam encapsulates the logic to manage different cloud providers.
func (s *Store) CreateTeam(params *atlasv2.CreateTeamApiParams) (*atlasv2.Team, error) {
	result, _, err := s.clientv2.TeamsApi.CreateTeamWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteTeamOperation interface {
	DeleteTeam (*atlasv2.DeleteTeamApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteTeam encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteTeam(params *atlasv2.DeleteTeamApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.TeamsApi.DeleteTeamWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetTeamByIdOperation interface {
	GetTeamById (*atlasv2.GetTeamByIdApiParams) (*atlasv2.TeamResponse, error)
}

// GetTeamById encapsulates the logic to manage different cloud providers.
func (s *Store) GetTeamById(params *atlasv2.GetTeamByIdApiParams) (*atlasv2.TeamResponse, error) {
	result, _, err := s.clientv2.TeamsApi.GetTeamByIdWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetTeamByNameOperation interface {
	GetTeamByName (*atlasv2.GetTeamByNameApiParams) (*atlasv2.TeamResponse, error)
}

// GetTeamByName encapsulates the logic to manage different cloud providers.
func (s *Store) GetTeamByName(params *atlasv2.GetTeamByNameApiParams) (*atlasv2.TeamResponse, error) {
	result, _, err := s.clientv2.TeamsApi.GetTeamByNameWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListOrganizationTeamsOperation interface {
	ListOrganizationTeams (*atlasv2.ListOrganizationTeamsApiParams) (*atlasv2.PaginatedTeam, error)
}

// ListOrganizationTeams encapsulates the logic to manage different cloud providers.
func (s *Store) ListOrganizationTeams(params *atlasv2.ListOrganizationTeamsApiParams) (*atlasv2.PaginatedTeam, error) {
	result, _, err := s.clientv2.TeamsApi.ListOrganizationTeamsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectTeamsOperation interface {
	ListProjectTeams (*atlasv2.ListProjectTeamsApiParams) (*atlasv2.PaginatedTeamRole, error)
}

// ListProjectTeams encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjectTeams(params *atlasv2.ListProjectTeamsApiParams) (*atlasv2.PaginatedTeamRole, error) {
	result, _, err := s.clientv2.TeamsApi.ListProjectTeamsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListTeamUsersOperation interface {
	ListTeamUsers (*atlasv2.ListTeamUsersApiParams) (*atlasv2.PaginatedApiAppUser, error)
}

// ListTeamUsers encapsulates the logic to manage different cloud providers.
func (s *Store) ListTeamUsers(params *atlasv2.ListTeamUsersApiParams) (*atlasv2.PaginatedApiAppUser, error) {
	result, _, err := s.clientv2.TeamsApi.ListTeamUsersWithParams(s.ctx, params).Execute()
	return &result, err
}

type RemoveProjectTeamOperation interface {
	RemoveProjectTeam (*atlasv2.RemoveProjectTeamApiParams) (*atlasv2.map[string]interface{}, error)
}

// RemoveProjectTeam encapsulates the logic to manage different cloud providers.
func (s *Store) RemoveProjectTeam(params *atlasv2.RemoveProjectTeamApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.TeamsApi.RemoveProjectTeamWithParams(s.ctx, params).Execute()
	return &result, err
}

type RemoveTeamUserOperation interface {
	RemoveTeamUser (*atlasv2.RemoveTeamUserApiParams) (, error)
}

// RemoveTeamUser encapsulates the logic to manage different cloud providers.
func (s *Store) RemoveTeamUser(params *atlasv2.RemoveTeamUserApiParams) (error) {
	_, err := s.clientv2.TeamsApi.RemoveTeamUserWithParams(s.ctx, params).Execute()
	return err
}

type RenameTeamOperation interface {
	RenameTeam (*atlasv2.RenameTeamApiParams) (*atlasv2.TeamResponse, error)
}

// RenameTeam encapsulates the logic to manage different cloud providers.
func (s *Store) RenameTeam(params *atlasv2.RenameTeamApiParams) (*atlasv2.TeamResponse, error) {
	result, _, err := s.clientv2.TeamsApi.RenameTeamWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateTeamRolesOperation interface {
	UpdateTeamRoles (*atlasv2.UpdateTeamRolesApiParams) (*atlasv2.PaginatedTeamRole, error)
}

// UpdateTeamRoles encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateTeamRoles(params *atlasv2.UpdateTeamRolesApiParams) (*atlasv2.PaginatedTeamRole, error) {
	result, _, err := s.clientv2.TeamsApi.UpdateTeamRolesWithParams(s.ctx, params).Execute()
	return &result, err
}


// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreatePeeringConnectionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreatePeeringConnectionOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreatePeeringConnectionOpts) Run() error {
	params := &atlasv2.CreatePeeringConnectionApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreatePeeringConnection(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePeeringConnectionTemplate = "<<some template>>"

func CreatePeeringConnectionBuilder() cobra.Command {
	opts := CreatePeeringConnectionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePeeringConnectionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type CreatePeeringContainerOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreatePeeringContainerOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreatePeeringContainerOpts) Run() error {
	params := &atlasv2.CreatePeeringContainerApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreatePeeringContainer(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreatePeeringContainerTemplate = "<<some template>>"

func CreatePeeringContainerBuilder() cobra.Command {
	opts := CreatePeeringContainerOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreatePeeringContainerTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeletePeeringConnectionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeletePeeringConnectionOperation
	groupId string
	peerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeletePeeringConnectionOpts) Run() error {
	params := &atlasv2.DeletePeeringConnectionApiParams{
		GroupId: opts.groupId,
		PeerId: opts.peerId,
	}
	resp, _, err := opts.store.DeletePeeringConnection(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePeeringConnectionTemplate = "<<some template>>"

func DeletePeeringConnectionBuilder() cobra.Command {
	opts := DeletePeeringConnectionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePeeringConnectionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.peerId, "peerId", "", "usage description")

	return cmd
}
type DeletePeeringContainerOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeletePeeringContainerOperation
	groupId string
	containerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeletePeeringContainerOpts) Run() error {
	params := &atlasv2.DeletePeeringContainerApiParams{
		GroupId: opts.groupId,
		ContainerId: opts.containerId,
	}
	resp, _, err := opts.store.DeletePeeringContainer(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeletePeeringContainerTemplate = "<<some template>>"

func DeletePeeringContainerBuilder() cobra.Command {
	opts := DeletePeeringContainerOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeletePeeringContainerTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.containerId, "containerId", "", "usage description")

	return cmd
}
type DisablePeeringOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DisablePeeringOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DisablePeeringOpts) Run() error {
	params := &atlasv2.DisablePeeringApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.DisablePeering(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DisablePeeringTemplate = "<<some template>>"

func DisablePeeringBuilder() cobra.Command {
	opts := DisablePeeringOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DisablePeeringTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type GetPeeringConnectionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetPeeringConnectionOperation
	groupId string
	peerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetPeeringConnectionOpts) Run() error {
	params := &atlasv2.GetPeeringConnectionApiParams{
		GroupId: opts.groupId,
		PeerId: opts.peerId,
	}
	resp, _, err := opts.store.GetPeeringConnection(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPeeringConnectionTemplate = "<<some template>>"

func GetPeeringConnectionBuilder() cobra.Command {
	opts := GetPeeringConnectionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPeeringConnectionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.peerId, "peerId", "", "usage description")

	return cmd
}
type GetPeeringContainerOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetPeeringContainerOperation
	groupId string
	containerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetPeeringContainerOpts) Run() error {
	params := &atlasv2.GetPeeringContainerApiParams{
		GroupId: opts.groupId,
		ContainerId: opts.containerId,
	}
	resp, _, err := opts.store.GetPeeringContainer(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetPeeringContainerTemplate = "<<some template>>"

func GetPeeringContainerBuilder() cobra.Command {
	opts := GetPeeringContainerOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetPeeringContainerTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.containerId, "containerId", "", "usage description")

	return cmd
}
type ListPeeringConnectionsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListPeeringConnectionsOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	providerName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListPeeringConnectionsOpts) Run() error {
	params := &atlasv2.ListPeeringConnectionsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		ProviderName: opts.providerName,
	}
	resp, _, err := opts.store.ListPeeringConnections(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListPeeringConnectionsTemplate = "<<some template>>"

func ListPeeringConnectionsBuilder() cobra.Command {
	opts := ListPeeringConnectionsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListPeeringConnectionsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.providerName, "providerName", "", "usage description")

	return cmd
}
type ListPeeringContainerByCloudProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListPeeringContainerByCloudProviderOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	providerName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListPeeringContainerByCloudProviderOpts) Run() error {
	params := &atlasv2.ListPeeringContainerByCloudProviderApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		ProviderName: opts.providerName,
	}
	resp, _, err := opts.store.ListPeeringContainerByCloudProvider(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListPeeringContainerByCloudProviderTemplate = "<<some template>>"

func ListPeeringContainerByCloudProviderBuilder() cobra.Command {
	opts := ListPeeringContainerByCloudProviderOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListPeeringContainerByCloudProviderTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.providerName, "providerName", "", "usage description")

	return cmd
}
type ListPeeringContainersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListPeeringContainersOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListPeeringContainersOpts) Run() error {
	params := &atlasv2.ListPeeringContainersApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListPeeringContainers(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListPeeringContainersTemplate = "<<some template>>"

func ListPeeringContainersBuilder() cobra.Command {
	opts := ListPeeringContainersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListPeeringContainersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type UpdatePeeringConnectionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdatePeeringConnectionOperation
	groupId string
	peerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdatePeeringConnectionOpts) Run() error {
	params := &atlasv2.UpdatePeeringConnectionApiParams{
		GroupId: opts.groupId,
		PeerId: opts.peerId,
	}
	resp, _, err := opts.store.UpdatePeeringConnection(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdatePeeringConnectionTemplate = "<<some template>>"

func UpdatePeeringConnectionBuilder() cobra.Command {
	opts := UpdatePeeringConnectionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdatePeeringConnectionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.peerId, "peerId", "", "usage description")

	return cmd
}
type UpdatePeeringContainerOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdatePeeringContainerOperation
	groupId string
	containerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdatePeeringContainerOpts) Run() error {
	params := &atlasv2.UpdatePeeringContainerApiParams{
		GroupId: opts.groupId,
		ContainerId: opts.containerId,
	}
	resp, _, err := opts.store.UpdatePeeringContainer(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdatePeeringContainerTemplate = "<<some template>>"

func UpdatePeeringContainerBuilder() cobra.Command {
	opts := UpdatePeeringContainerOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdatePeeringContainerTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.containerId, "containerId", "", "usage description")

	return cmd
}
type VerifyConnectViaPeeringOnlyModeForOneProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.VerifyConnectViaPeeringOnlyModeForOneProjectOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *VerifyConnectViaPeeringOnlyModeForOneProjectOpts) Run() error {
	params := &atlasv2.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.VerifyConnectViaPeeringOnlyModeForOneProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const VerifyConnectViaPeeringOnlyModeForOneProjectTemplate = "<<some template>>"

func VerifyConnectViaPeeringOnlyModeForOneProjectBuilder() cobra.Command {
	opts := VerifyConnectViaPeeringOnlyModeForOneProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), VerifyConnectViaPeeringOnlyModeForOneProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

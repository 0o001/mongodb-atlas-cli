// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	projectOwnerId string
}

func (opts *CreateProjectOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateProjectOpts) Run(ctx context.Context) error {
	params := &admin.CreateProjectApiParams{
		ProjectOwnerId: opts.projectOwnerId,
	}
	resp, _, err := opts.client.ProjectsApi.CreateProjectWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectTemplate = "<<some template>>"

func CreateProjectBuilder() cobra.Command {
	opts := CreateProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.projectOwnerId, "projectOwnerId", "", "usage description")

	return cmd
}
type CreateProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *CreateProjectInvitationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateProjectInvitationOpts) Run(ctx context.Context) error {
	params := &admin.CreateProjectInvitationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.CreateProjectInvitationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectInvitationTemplate = "<<some template>>"

func CreateProjectInvitationBuilder() cobra.Command {
	opts := CreateProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type DeleteProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *DeleteProjectOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteProjectOpts) Run(ctx context.Context) error {
	params := &admin.DeleteProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.DeleteProjectWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectTemplate = "<<some template>>"

func DeleteProjectBuilder() cobra.Command {
	opts := DeleteProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type DeleteProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	invitationId string
}

func (opts *DeleteProjectInvitationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteProjectInvitationOpts) Run(ctx context.Context) error {
	params := &admin.DeleteProjectInvitationApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.client.ProjectsApi.DeleteProjectInvitationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectInvitationTemplate = "<<some template>>"

func DeleteProjectInvitationBuilder() cobra.Command {
	opts := DeleteProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")
	_ = cmd.MarkFlagRequired("invitationId")

	return cmd
}
type DeleteProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	limitName string
	groupId string
}

func (opts *DeleteProjectLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteProjectLimitOpts) Run(ctx context.Context) error {
	params := &admin.DeleteProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.DeleteProjectLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectLimitTemplate = "<<some template>>"

func DeleteProjectLimitBuilder() cobra.Command {
	opts := DeleteProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type GetProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *GetProjectOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.GetProjectWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectTemplate = "<<some template>>"

func GetProjectBuilder() cobra.Command {
	opts := GetProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type GetProjectByNameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupName string
}

func (opts *GetProjectByNameOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectByNameOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectByNameApiParams{
		GroupName: opts.groupName,
	}
	resp, _, err := opts.client.ProjectsApi.GetProjectByNameWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectByNameTemplate = "<<some template>>"

func GetProjectByNameBuilder() cobra.Command {
	opts := GetProjectByNameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectByNameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupName, "groupName", "", "usage description")
	_ = cmd.MarkFlagRequired("groupName")

	return cmd
}
type GetProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	invitationId string
}

func (opts *GetProjectInvitationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectInvitationOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectInvitationApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.client.ProjectsApi.GetProjectInvitationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectInvitationTemplate = "<<some template>>"

func GetProjectInvitationBuilder() cobra.Command {
	opts := GetProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")
	_ = cmd.MarkFlagRequired("invitationId")

	return cmd
}
type GetProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	limitName string
	groupId string
}

func (opts *GetProjectLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectLimitOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.GetProjectLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectLimitTemplate = "<<some template>>"

func GetProjectLimitBuilder() cobra.Command {
	opts := GetProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type GetProjectSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *GetProjectSettingsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectSettingsOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.GetProjectSettingsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectSettingsTemplate = "<<some template>>"

func GetProjectSettingsBuilder() cobra.Command {
	opts := GetProjectSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type ListProjectInvitationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	username string
}

func (opts *ListProjectInvitationsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListProjectInvitationsOpts) Run(ctx context.Context) error {
	params := &admin.ListProjectInvitationsApiParams{
		GroupId: opts.groupId,
		Username: opts.username,
	}
	resp, _, err := opts.client.ProjectsApi.ListProjectInvitationsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectInvitationsTemplate = "<<some template>>"

func ListProjectInvitationsBuilder() cobra.Command {
	opts := ListProjectInvitationsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectInvitationsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}
type ListProjectLimitsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *ListProjectLimitsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListProjectLimitsOpts) Run(ctx context.Context) error {
	params := &admin.ListProjectLimitsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.ListProjectLimitsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectLimitsTemplate = "<<some template>>"

func ListProjectLimitsBuilder() cobra.Command {
	opts := ListProjectLimitsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectLimitsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type ListProjectUsersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	flattenTeams bool
	includeOrgUsers bool
}

func (opts *ListProjectUsersOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListProjectUsersOpts) Run(ctx context.Context) error {
	params := &admin.ListProjectUsersApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		FlattenTeams: opts.flattenTeams,
		IncludeOrgUsers: opts.includeOrgUsers,
	}
	resp, _, err := opts.client.ProjectsApi.ListProjectUsersWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectUsersTemplate = "<<some template>>"

func ListProjectUsersBuilder() cobra.Command {
	opts := ListProjectUsersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectUsersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.flattenTeams, "flattenTeams", "", "usage description")
	cmd.Flags().StringVar(&opts.includeOrgUsers, "includeOrgUsers", "", "usage description")

	return cmd
}
type ListProjectsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListProjectsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListProjectsOpts) Run(ctx context.Context) error {
	params := &admin.ListProjectsApiParams{
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.client.ProjectsApi.ListProjectsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectsTemplate = "<<some template>>"

func ListProjectsBuilder() cobra.Command {
	opts := ListProjectsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type RemoveProjectUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	userId string
}

func (opts *RemoveProjectUserOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *RemoveProjectUserOpts) Run(ctx context.Context) error {
	params := &admin.RemoveProjectUserApiParams{
		GroupId: opts.groupId,
		UserId: opts.userId,
	}
	_, err := opts.client.ProjectsApi.RemoveProjectUserWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const RemoveProjectUserTemplate = "<<some template>>"

func RemoveProjectUserBuilder() cobra.Command {
	opts := RemoveProjectUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveProjectUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.userId, "userId", "", "usage description")
	_ = cmd.MarkFlagRequired("userId")

	return cmd
}
type SetProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	limitName string
	groupId string
}

func (opts *SetProjectLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *SetProjectLimitOpts) Run(ctx context.Context) error {
	params := &admin.SetProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.SetProjectLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const SetProjectLimitTemplate = "<<some template>>"

func SetProjectLimitBuilder() cobra.Command {
	opts := SetProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), SetProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type UpdateProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *UpdateProjectOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateProjectOpts) Run(ctx context.Context) error {
	params := &admin.UpdateProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.UpdateProjectWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectTemplate = "<<some template>>"

func UpdateProjectBuilder() cobra.Command {
	opts := UpdateProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type UpdateProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *UpdateProjectInvitationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateProjectInvitationOpts) Run(ctx context.Context) error {
	params := &admin.UpdateProjectInvitationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.UpdateProjectInvitationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectInvitationTemplate = "<<some template>>"

func UpdateProjectInvitationBuilder() cobra.Command {
	opts := UpdateProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type UpdateProjectInvitationByIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	invitationId string
}

func (opts *UpdateProjectInvitationByIdOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateProjectInvitationByIdOpts) Run(ctx context.Context) error {
	params := &admin.UpdateProjectInvitationByIdApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.client.ProjectsApi.UpdateProjectInvitationByIdWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectInvitationByIdTemplate = "<<some template>>"

func UpdateProjectInvitationByIdBuilder() cobra.Command {
	opts := UpdateProjectInvitationByIdOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectInvitationByIdTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")
	_ = cmd.MarkFlagRequired("invitationId")

	return cmd
}
type UpdateProjectSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *UpdateProjectSettingsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateProjectSettingsOpts) Run(ctx context.Context) error {
	params := &admin.UpdateProjectSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.ProjectsApi.UpdateProjectSettingsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectSettingsTemplate = "<<some template>>"

func UpdateProjectSettingsBuilder() cobra.Command {
	opts := UpdateProjectSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}

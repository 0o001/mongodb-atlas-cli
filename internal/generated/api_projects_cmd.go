// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateProjectOperation
	projectOwnerId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateProjectOpts) Run() error {
	params := &atlasv2.CreateProjectApiParams{
		ProjectOwnerId: opts.projectOwnerId,
	}
	resp, _, err := opts.store.CreateProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectTemplate = "<<some template>>"

func CreateProjectBuilder() cobra.Command {
	opts := CreateProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.projectOwnerId, "projectOwnerId", "", "usage description")

	return cmd
}
type CreateProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateProjectInvitationOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateProjectInvitationOpts) Run() error {
	params := &atlasv2.CreateProjectInvitationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateProjectInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectInvitationTemplate = "<<some template>>"

func CreateProjectInvitationBuilder() cobra.Command {
	opts := CreateProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeleteProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteProjectOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteProjectOpts) Run() error {
	params := &atlasv2.DeleteProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.DeleteProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectTemplate = "<<some template>>"

func DeleteProjectBuilder() cobra.Command {
	opts := DeleteProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeleteProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteProjectInvitationOperation
	groupId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteProjectInvitationOpts) Run() error {
	params := &atlasv2.DeleteProjectInvitationApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.DeleteProjectInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectInvitationTemplate = "<<some template>>"

func DeleteProjectInvitationBuilder() cobra.Command {
	opts := DeleteProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type DeleteProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteProjectLimitOperation
	limitName string
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteProjectLimitOpts) Run() error {
	params := &atlasv2.DeleteProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.DeleteProjectLimit(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectLimitTemplate = "<<some template>>"

func DeleteProjectLimitBuilder() cobra.Command {
	opts := DeleteProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type GetProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectOpts) Run() error {
	params := &atlasv2.GetProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.GetProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectTemplate = "<<some template>>"

func GetProjectBuilder() cobra.Command {
	opts := GetProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type GetProjectByNameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectByNameOperation
	groupName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectByNameOpts) Run() error {
	params := &atlasv2.GetProjectByNameApiParams{
		GroupName: opts.groupName,
	}
	resp, _, err := opts.store.GetProjectByName(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectByNameTemplate = "<<some template>>"

func GetProjectByNameBuilder() cobra.Command {
	opts := GetProjectByNameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectByNameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupName, "groupName", "", "usage description")

	return cmd
}
type GetProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectInvitationOperation
	groupId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectInvitationOpts) Run() error {
	params := &atlasv2.GetProjectInvitationApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.GetProjectInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectInvitationTemplate = "<<some template>>"

func GetProjectInvitationBuilder() cobra.Command {
	opts := GetProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type GetProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectLimitOperation
	limitName string
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectLimitOpts) Run() error {
	params := &atlasv2.GetProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.GetProjectLimit(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectLimitTemplate = "<<some template>>"

func GetProjectLimitBuilder() cobra.Command {
	opts := GetProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type GetProjectSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectSettingsOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectSettingsOpts) Run() error {
	params := &atlasv2.GetProjectSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.GetProjectSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectSettingsTemplate = "<<some template>>"

func GetProjectSettingsBuilder() cobra.Command {
	opts := GetProjectSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type ListProjectInvitationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectInvitationsOperation
	groupId string
	username string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectInvitationsOpts) Run() error {
	params := &atlasv2.ListProjectInvitationsApiParams{
		GroupId: opts.groupId,
		Username: opts.username,
	}
	resp, _, err := opts.store.ListProjectInvitations(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectInvitationsTemplate = "<<some template>>"

func ListProjectInvitationsBuilder() cobra.Command {
	opts := ListProjectInvitationsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectInvitationsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}
type ListProjectLimitsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectLimitsOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectLimitsOpts) Run() error {
	params := &atlasv2.ListProjectLimitsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.ListProjectLimits(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectLimitsTemplate = "<<some template>>"

func ListProjectLimitsBuilder() cobra.Command {
	opts := ListProjectLimitsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectLimitsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type ListProjectUsersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectUsersOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	flattenTeams bool
	includeOrgUsers bool
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectUsersOpts) Run() error {
	params := &atlasv2.ListProjectUsersApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		FlattenTeams: opts.flattenTeams,
		IncludeOrgUsers: opts.includeOrgUsers,
	}
	resp, _, err := opts.store.ListProjectUsers(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectUsersTemplate = "<<some template>>"

func ListProjectUsersBuilder() cobra.Command {
	opts := ListProjectUsersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectUsersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.flattenTeams, "flattenTeams", "", "usage description")
	cmd.Flags().StringVar(&opts.includeOrgUsers, "includeOrgUsers", "", "usage description")

	return cmd
}
type ListProjectsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectsOperation
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectsOpts) Run() error {
	params := &atlasv2.ListProjectsApiParams{
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListProjects(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectsTemplate = "<<some template>>"

func ListProjectsBuilder() cobra.Command {
	opts := ListProjectsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type RemoveProjectUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RemoveProjectUserOperation
	groupId string
	userId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RemoveProjectUserOpts) Run() error {
	params := &atlasv2.RemoveProjectUserApiParams{
		GroupId: opts.groupId,
		UserId: opts.userId,
	}
	_, err := opts.store.RemoveProjectUser(params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const RemoveProjectUserTemplate = "<<some template>>"

func RemoveProjectUserBuilder() cobra.Command {
	opts := RemoveProjectUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveProjectUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.userId, "userId", "", "usage description")

	return cmd
}
type SetProjectLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.SetProjectLimitOperation
	limitName string
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *SetProjectLimitOpts) Run() error {
	params := &atlasv2.SetProjectLimitApiParams{
		LimitName: opts.limitName,
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.SetProjectLimit(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const SetProjectLimitTemplate = "<<some template>>"

func SetProjectLimitBuilder() cobra.Command {
	opts := SetProjectLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), SetProjectLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpdateProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateProjectOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateProjectOpts) Run() error {
	params := &atlasv2.UpdateProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpdateProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectTemplate = "<<some template>>"

func UpdateProjectBuilder() cobra.Command {
	opts := UpdateProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpdateProjectInvitationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateProjectInvitationOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateProjectInvitationOpts) Run() error {
	params := &atlasv2.UpdateProjectInvitationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpdateProjectInvitation(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectInvitationTemplate = "<<some template>>"

func UpdateProjectInvitationBuilder() cobra.Command {
	opts := UpdateProjectInvitationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectInvitationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpdateProjectInvitationByIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateProjectInvitationByIdOperation
	groupId string
	invitationId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateProjectInvitationByIdOpts) Run() error {
	params := &atlasv2.UpdateProjectInvitationByIdApiParams{
		GroupId: opts.groupId,
		InvitationId: opts.invitationId,
	}
	resp, _, err := opts.store.UpdateProjectInvitationById(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectInvitationByIdTemplate = "<<some template>>"

func UpdateProjectInvitationByIdBuilder() cobra.Command {
	opts := UpdateProjectInvitationByIdOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectInvitationByIdTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.invitationId, "invitationId", "", "usage description")

	return cmd
}
type UpdateProjectSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateProjectSettingsOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateProjectSettingsOpts) Run() error {
	params := &atlasv2.UpdateProjectSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpdateProjectSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateProjectSettingsTemplate = "<<some template>>"

func UpdateProjectSettingsBuilder() cobra.Command {
	opts := UpdateProjectSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateProjectSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

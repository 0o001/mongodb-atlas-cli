// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_network_peering_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreatePeeringConnectionOperation, CreatePeeringContainerOperation, DeletePeeringConnectionOperation, DeletePeeringContainerOperation, DisablePeeringOperation, GetPeeringConnectionOperation, GetPeeringContainerOperation, ListPeeringConnectionsOperation, ListPeeringContainerByCloudProviderOperation, ListPeeringContainersOperation, UpdatePeeringConnectionOperation, UpdatePeeringContainerOperation, VerifyConnectViaPeeringOnlyModeForOneProjectOperation

type CreatePeeringConnectionOperation interface {
	CreatePeeringConnection (*atlasv2.CreatePeeringConnectionApiParams) (*atlasv2.ContainerPeer, error)
}

// CreatePeeringConnection encapsulates the logic to manage different cloud providers.
func (s *Store) CreatePeeringConnection(params *atlasv2.CreatePeeringConnectionApiParams) (*atlasv2.ContainerPeer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.CreatePeeringConnectionWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreatePeeringContainerOperation interface {
	CreatePeeringContainer (*atlasv2.CreatePeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error)
}

// CreatePeeringContainer encapsulates the logic to manage different cloud providers.
func (s *Store) CreatePeeringContainer(params *atlasv2.CreatePeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.CreatePeeringContainerWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeletePeeringConnectionOperation interface {
	DeletePeeringConnection (*atlasv2.DeletePeeringConnectionApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeletePeeringConnection encapsulates the logic to manage different cloud providers.
func (s *Store) DeletePeeringConnection(params *atlasv2.DeletePeeringConnectionApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.DeletePeeringConnectionWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeletePeeringContainerOperation interface {
	DeletePeeringContainer (*atlasv2.DeletePeeringContainerApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeletePeeringContainer encapsulates the logic to manage different cloud providers.
func (s *Store) DeletePeeringContainer(params *atlasv2.DeletePeeringContainerApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.DeletePeeringContainerWithParams(s.ctx, params).Execute()
	return &result, err
}

type DisablePeeringOperation interface {
	DisablePeering (*atlasv2.DisablePeeringApiParams) (*atlasv2.PrivateIPMode, error)
}

// DisablePeering encapsulates the logic to manage different cloud providers.
func (s *Store) DisablePeering(params *atlasv2.DisablePeeringApiParams) (*atlasv2.PrivateIPMode, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.DisablePeeringWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetPeeringConnectionOperation interface {
	GetPeeringConnection (*atlasv2.GetPeeringConnectionApiParams) (*atlasv2.ContainerPeer, error)
}

// GetPeeringConnection encapsulates the logic to manage different cloud providers.
func (s *Store) GetPeeringConnection(params *atlasv2.GetPeeringConnectionApiParams) (*atlasv2.ContainerPeer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.GetPeeringConnectionWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetPeeringContainerOperation interface {
	GetPeeringContainer (*atlasv2.GetPeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error)
}

// GetPeeringContainer encapsulates the logic to manage different cloud providers.
func (s *Store) GetPeeringContainer(params *atlasv2.GetPeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.GetPeeringContainerWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPeeringConnectionsOperation interface {
	ListPeeringConnections (*atlasv2.ListPeeringConnectionsApiParams) (*atlasv2.PaginatedContainerPeer, error)
}

// ListPeeringConnections encapsulates the logic to manage different cloud providers.
func (s *Store) ListPeeringConnections(params *atlasv2.ListPeeringConnectionsApiParams) (*atlasv2.PaginatedContainerPeer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.ListPeeringConnectionsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPeeringContainerByCloudProviderOperation interface {
	ListPeeringContainerByCloudProvider (*atlasv2.ListPeeringContainerByCloudProviderApiParams) (*atlasv2.PaginatedCloudProviderContainer, error)
}

// ListPeeringContainerByCloudProvider encapsulates the logic to manage different cloud providers.
func (s *Store) ListPeeringContainerByCloudProvider(params *atlasv2.ListPeeringContainerByCloudProviderApiParams) (*atlasv2.PaginatedCloudProviderContainer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.ListPeeringContainerByCloudProviderWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListPeeringContainersOperation interface {
	ListPeeringContainers (*atlasv2.ListPeeringContainersApiParams) (*atlasv2.PaginatedCloudProviderContainer, error)
}

// ListPeeringContainers encapsulates the logic to manage different cloud providers.
func (s *Store) ListPeeringContainers(params *atlasv2.ListPeeringContainersApiParams) (*atlasv2.PaginatedCloudProviderContainer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.ListPeeringContainersWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdatePeeringConnectionOperation interface {
	UpdatePeeringConnection (*atlasv2.UpdatePeeringConnectionApiParams) (*atlasv2.ContainerPeer, error)
}

// UpdatePeeringConnection encapsulates the logic to manage different cloud providers.
func (s *Store) UpdatePeeringConnection(params *atlasv2.UpdatePeeringConnectionApiParams) (*atlasv2.ContainerPeer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.UpdatePeeringConnectionWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdatePeeringContainerOperation interface {
	UpdatePeeringContainer (*atlasv2.UpdatePeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error)
}

// UpdatePeeringContainer encapsulates the logic to manage different cloud providers.
func (s *Store) UpdatePeeringContainer(params *atlasv2.UpdatePeeringContainerApiParams) (*atlasv2.CloudProviderContainer, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.UpdatePeeringContainerWithParams(s.ctx, params).Execute()
	return &result, err
}

type VerifyConnectViaPeeringOnlyModeForOneProjectOperation interface {
	VerifyConnectViaPeeringOnlyModeForOneProject (*atlasv2.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams) (*atlasv2.PrivateIPMode, error)
}

// VerifyConnectViaPeeringOnlyModeForOneProject encapsulates the logic to manage different cloud providers.
func (s *Store) VerifyConnectViaPeeringOnlyModeForOneProject(params *atlasv2.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams) (*atlasv2.PrivateIPMode, error) {
	result, _, err := s.clientv2.NetworkPeeringApi.VerifyConnectViaPeeringOnlyModeForOneProjectWithParams(s.ctx, params).Execute()
	return &result, err
}


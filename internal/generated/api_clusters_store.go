// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_clusters_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas GetClusterAdvancedConfigurationOperation, GetClusterStatusOperation, GetSampleDatasetLoadStatusOperation, ListCloudProviderRegionsOperation, ListClustersForAllProjectsOperation, LoadSampleDatasetOperation, UpdateClusterAdvancedConfigurationOperation, UpgradeSharedClusterOperation, UpgradeSharedClusterToServerlessOperation

type GetClusterAdvancedConfigurationOperation interface {
	GetClusterAdvancedConfiguration (*atlasv2.GetClusterAdvancedConfigurationApiParams) (*atlasv2.ClusterDescriptionProcessArgs, error)
}

// GetClusterAdvancedConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) GetClusterAdvancedConfiguration(params *atlasv2.GetClusterAdvancedConfigurationApiParams) (*atlasv2.ClusterDescriptionProcessArgs, error) {
	result, _, err := s.clientv2.ClustersApi.GetClusterAdvancedConfigurationWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetClusterStatusOperation interface {
	GetClusterStatus (*atlasv2.GetClusterStatusApiParams) (*atlasv2.ClusterStatus, error)
}

// GetClusterStatus encapsulates the logic to manage different cloud providers.
func (s *Store) GetClusterStatus(params *atlasv2.GetClusterStatusApiParams) (*atlasv2.ClusterStatus, error) {
	result, _, err := s.clientv2.ClustersApi.GetClusterStatusWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetSampleDatasetLoadStatusOperation interface {
	GetSampleDatasetLoadStatus (*atlasv2.GetSampleDatasetLoadStatusApiParams) (*atlasv2.SampleDatasetStatus, error)
}

// GetSampleDatasetLoadStatus encapsulates the logic to manage different cloud providers.
func (s *Store) GetSampleDatasetLoadStatus(params *atlasv2.GetSampleDatasetLoadStatusApiParams) (*atlasv2.SampleDatasetStatus, error) {
	result, _, err := s.clientv2.ClustersApi.GetSampleDatasetLoadStatusWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListCloudProviderRegionsOperation interface {
	ListCloudProviderRegions (*atlasv2.ListCloudProviderRegionsApiParams) (*atlasv2.PaginatedApiAtlasProviderRegions, error)
}

// ListCloudProviderRegions encapsulates the logic to manage different cloud providers.
func (s *Store) ListCloudProviderRegions(params *atlasv2.ListCloudProviderRegionsApiParams) (*atlasv2.PaginatedApiAtlasProviderRegions, error) {
	result, _, err := s.clientv2.ClustersApi.ListCloudProviderRegionsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListClustersForAllProjectsOperation interface {
	ListClustersForAllProjects (*atlasv2.ListClustersForAllProjectsApiParams) (*atlasv2.PaginatedOrgGroup, error)
}

// ListClustersForAllProjects encapsulates the logic to manage different cloud providers.
func (s *Store) ListClustersForAllProjects(params *atlasv2.ListClustersForAllProjectsApiParams) (*atlasv2.PaginatedOrgGroup, error) {
	result, _, err := s.clientv2.ClustersApi.ListClustersForAllProjectsWithParams(s.ctx, params).Execute()
	return &result, err
}

type LoadSampleDatasetOperation interface {
	LoadSampleDataset (*atlasv2.LoadSampleDatasetApiParams) (*atlasv2.SampleDatasetStatus, error)
}

// LoadSampleDataset encapsulates the logic to manage different cloud providers.
func (s *Store) LoadSampleDataset(params *atlasv2.LoadSampleDatasetApiParams) (*atlasv2.SampleDatasetStatus, error) {
	result, _, err := s.clientv2.ClustersApi.LoadSampleDatasetWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateClusterAdvancedConfigurationOperation interface {
	UpdateClusterAdvancedConfiguration (*atlasv2.UpdateClusterAdvancedConfigurationApiParams) (*atlasv2.ClusterDescriptionProcessArgs, error)
}

// UpdateClusterAdvancedConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateClusterAdvancedConfiguration(params *atlasv2.UpdateClusterAdvancedConfigurationApiParams) (*atlasv2.ClusterDescriptionProcessArgs, error) {
	result, _, err := s.clientv2.ClustersApi.UpdateClusterAdvancedConfigurationWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpgradeSharedClusterOperation interface {
	UpgradeSharedCluster (*atlasv2.UpgradeSharedClusterApiParams) (*atlasv2.LegacyClusterDescription, error)
}

// UpgradeSharedCluster encapsulates the logic to manage different cloud providers.
func (s *Store) UpgradeSharedCluster(params *atlasv2.UpgradeSharedClusterApiParams) (*atlasv2.LegacyClusterDescription, error) {
	result, _, err := s.clientv2.ClustersApi.UpgradeSharedClusterWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpgradeSharedClusterToServerlessOperation interface {
	UpgradeSharedClusterToServerless (*atlasv2.UpgradeSharedClusterToServerlessApiParams) (*atlasv2.ServerlessInstanceDescription, error)
}

// UpgradeSharedClusterToServerless encapsulates the logic to manage different cloud providers.
func (s *Store) UpgradeSharedClusterToServerless(params *atlasv2.UpgradeSharedClusterToServerlessApiParams) (*atlasv2.ServerlessInstanceDescription, error) {
	result, _, err := s.clientv2.ClustersApi.UpgradeSharedClusterToServerlessWithParams(s.ctx, params).Execute()
	return &result, err
}


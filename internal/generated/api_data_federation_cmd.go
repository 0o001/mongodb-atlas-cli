// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateDataFederationPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *CreateDataFederationPrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateDataFederationPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.CreateDataFederationPrivateEndpointApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.DataFederationApi.CreateDataFederationPrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateDataFederationPrivateEndpointTemplate = "<<some template>>"

func CreateDataFederationPrivateEndpointBuilder() cobra.Command {
	opts := CreateDataFederationPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateDataFederationPrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type CreateFederatedDatabaseOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	skipRoleValidation bool
}

func (opts *CreateFederatedDatabaseOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateFederatedDatabaseOpts) Run(ctx context.Context) error {
	params := &admin.CreateFederatedDatabaseApiParams{
		GroupId: opts.groupId,
		SkipRoleValidation: opts.skipRoleValidation,
	}
	resp, _, err := opts.client.DataFederationApi.CreateFederatedDatabaseWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateFederatedDatabaseTemplate = "<<some template>>"

func CreateFederatedDatabaseBuilder() cobra.Command {
	opts := CreateFederatedDatabaseOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateFederatedDatabaseTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.skipRoleValidation, "skipRoleValidation", "", "usage description")

	return cmd
}
type CreateOneDataFederationQueryLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
	limitName string
}

func (opts *CreateOneDataFederationQueryLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateOneDataFederationQueryLimitOpts) Run(ctx context.Context) error {
	params := &admin.CreateOneDataFederationQueryLimitApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
		LimitName: opts.limitName,
	}
	resp, _, err := opts.client.DataFederationApi.CreateOneDataFederationQueryLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateOneDataFederationQueryLimitTemplate = "<<some template>>"

func CreateOneDataFederationQueryLimitBuilder() cobra.Command {
	opts := CreateOneDataFederationQueryLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateOneDataFederationQueryLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")

	return cmd
}
type DeleteDataFederationPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	endpointId string
}

func (opts *DeleteDataFederationPrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteDataFederationPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.DeleteDataFederationPrivateEndpointApiParams{
		GroupId: opts.groupId,
		EndpointId: opts.endpointId,
	}
	resp, _, err := opts.client.DataFederationApi.DeleteDataFederationPrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteDataFederationPrivateEndpointTemplate = "<<some template>>"

func DeleteDataFederationPrivateEndpointBuilder() cobra.Command {
	opts := DeleteDataFederationPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteDataFederationPrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointId")

	return cmd
}
type DeleteFederatedDatabaseOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
}

func (opts *DeleteFederatedDatabaseOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteFederatedDatabaseOpts) Run(ctx context.Context) error {
	params := &admin.DeleteFederatedDatabaseApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
	}
	resp, _, err := opts.client.DataFederationApi.DeleteFederatedDatabaseWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteFederatedDatabaseTemplate = "<<some template>>"

func DeleteFederatedDatabaseBuilder() cobra.Command {
	opts := DeleteFederatedDatabaseOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteFederatedDatabaseTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")

	return cmd
}
type DeleteOneDataFederationInstanceQueryLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
	limitName string
}

func (opts *DeleteOneDataFederationInstanceQueryLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteOneDataFederationInstanceQueryLimitOpts) Run(ctx context.Context) error {
	params := &admin.DeleteOneDataFederationInstanceQueryLimitApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
		LimitName: opts.limitName,
	}
	resp, _, err := opts.client.DataFederationApi.DeleteOneDataFederationInstanceQueryLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteOneDataFederationInstanceQueryLimitTemplate = "<<some template>>"

func DeleteOneDataFederationInstanceQueryLimitBuilder() cobra.Command {
	opts := DeleteOneDataFederationInstanceQueryLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteOneDataFederationInstanceQueryLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")

	return cmd
}
type DownloadFederatedDatabaseQueryLogsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
	endDate int64
	startDate int64
}

func (opts *DownloadFederatedDatabaseQueryLogsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DownloadFederatedDatabaseQueryLogsOpts) Run(ctx context.Context) error {
	params := &admin.DownloadFederatedDatabaseQueryLogsApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
		EndDate: opts.endDate,
		StartDate: opts.startDate,
	}
	resp, _, err := opts.client.DataFederationApi.DownloadFederatedDatabaseQueryLogsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DownloadFederatedDatabaseQueryLogsTemplate = "<<some template>>"

func DownloadFederatedDatabaseQueryLogsBuilder() cobra.Command {
	opts := DownloadFederatedDatabaseQueryLogsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DownloadFederatedDatabaseQueryLogsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")
	cmd.Flags().StringVar(&opts.endDate, "endDate", "", "usage description")
	cmd.Flags().StringVar(&opts.startDate, "startDate", "", "usage description")

	return cmd
}
type GetDataFederationPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	endpointId string
}

func (opts *GetDataFederationPrivateEndpointOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetDataFederationPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.GetDataFederationPrivateEndpointApiParams{
		GroupId: opts.groupId,
		EndpointId: opts.endpointId,
	}
	resp, _, err := opts.client.DataFederationApi.GetDataFederationPrivateEndpointWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDataFederationPrivateEndpointTemplate = "<<some template>>"

func GetDataFederationPrivateEndpointBuilder() cobra.Command {
	opts := GetDataFederationPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDataFederationPrivateEndpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "usage description")
	_ = cmd.MarkFlagRequired("endpointId")

	return cmd
}
type GetFederatedDatabaseOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
}

func (opts *GetFederatedDatabaseOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetFederatedDatabaseOpts) Run(ctx context.Context) error {
	params := &admin.GetFederatedDatabaseApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
	}
	resp, _, err := opts.client.DataFederationApi.GetFederatedDatabaseWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetFederatedDatabaseTemplate = "<<some template>>"

func GetFederatedDatabaseBuilder() cobra.Command {
	opts := GetFederatedDatabaseOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetFederatedDatabaseTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")

	return cmd
}
type ListDataFederationPrivateEndpointsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListDataFederationPrivateEndpointsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListDataFederationPrivateEndpointsOpts) Run(ctx context.Context) error {
	params := &admin.ListDataFederationPrivateEndpointsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.client.DataFederationApi.ListDataFederationPrivateEndpointsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListDataFederationPrivateEndpointsTemplate = "<<some template>>"

func ListDataFederationPrivateEndpointsBuilder() cobra.Command {
	opts := ListDataFederationPrivateEndpointsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListDataFederationPrivateEndpointsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListFederatedDatabasesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	type_ string
}

func (opts *ListFederatedDatabasesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListFederatedDatabasesOpts) Run(ctx context.Context) error {
	params := &admin.ListFederatedDatabasesApiParams{
		GroupId: opts.groupId,
		Type_: opts.type_,
	}
	resp, _, err := opts.client.DataFederationApi.ListFederatedDatabasesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListFederatedDatabasesTemplate = "<<some template>>"

func ListFederatedDatabasesBuilder() cobra.Command {
	opts := ListFederatedDatabasesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListFederatedDatabasesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.type_, "type_", "", "usage description")

	return cmd
}
type ReturnFederatedDatabaseQueryLimitOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
	limitName string
}

func (opts *ReturnFederatedDatabaseQueryLimitOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ReturnFederatedDatabaseQueryLimitOpts) Run(ctx context.Context) error {
	params := &admin.ReturnFederatedDatabaseQueryLimitApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
		LimitName: opts.limitName,
	}
	resp, _, err := opts.client.DataFederationApi.ReturnFederatedDatabaseQueryLimitWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ReturnFederatedDatabaseQueryLimitTemplate = "<<some template>>"

func ReturnFederatedDatabaseQueryLimitBuilder() cobra.Command {
	opts := ReturnFederatedDatabaseQueryLimitOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ReturnFederatedDatabaseQueryLimitTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")
	cmd.Flags().StringVar(&opts.limitName, "limitName", "", "usage description")
	_ = cmd.MarkFlagRequired("limitName")

	return cmd
}
type ReturnFederatedDatabaseQueryLimitsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
}

func (opts *ReturnFederatedDatabaseQueryLimitsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ReturnFederatedDatabaseQueryLimitsOpts) Run(ctx context.Context) error {
	params := &admin.ReturnFederatedDatabaseQueryLimitsApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
	}
	resp, _, err := opts.client.DataFederationApi.ReturnFederatedDatabaseQueryLimitsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ReturnFederatedDatabaseQueryLimitsTemplate = "<<some template>>"

func ReturnFederatedDatabaseQueryLimitsBuilder() cobra.Command {
	opts := ReturnFederatedDatabaseQueryLimitsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ReturnFederatedDatabaseQueryLimitsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")

	return cmd
}
type UpdateFederatedDatabaseOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	tenantName string
	skipRoleValidation bool
}

func (opts *UpdateFederatedDatabaseOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateFederatedDatabaseOpts) Run(ctx context.Context) error {
	params := &admin.UpdateFederatedDatabaseApiParams{
		GroupId: opts.groupId,
		TenantName: opts.tenantName,
		SkipRoleValidation: opts.skipRoleValidation,
	}
	resp, _, err := opts.client.DataFederationApi.UpdateFederatedDatabaseWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateFederatedDatabaseTemplate = "<<some template>>"

func UpdateFederatedDatabaseBuilder() cobra.Command {
	opts := UpdateFederatedDatabaseOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateFederatedDatabaseTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.tenantName, "tenantName", "", "usage description")
	_ = cmd.MarkFlagRequired("tenantName")
	cmd.Flags().StringVar(&opts.skipRoleValidation, "skipRoleValidation", "", "usage description")

	return cmd
}

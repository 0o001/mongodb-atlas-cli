// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateUserOperation
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateUserOpts) Run() error {
	params := &atlasv2.CreateUserApiParams{
	}
	resp, _, err := opts.store.CreateUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateUserTemplate = "<<some template>>"

func CreateUserBuilder() cobra.Command {
	opts := CreateUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}

	return cmd
}
type GetUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetUserOperation
	userId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetUserOpts) Run() error {
	params := &atlasv2.GetUserApiParams{
		UserId: opts.userId,
	}
	resp, _, err := opts.store.GetUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetUserTemplate = "<<some template>>"

func GetUserBuilder() cobra.Command {
	opts := GetUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.userId, "userId", "", "usage description")

	return cmd
}
type GetUserByUsernameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetUserByUsernameOperation
	userName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetUserByUsernameOpts) Run() error {
	params := &atlasv2.GetUserByUsernameApiParams{
		UserName: opts.userName,
	}
	resp, _, err := opts.store.GetUserByUsername(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetUserByUsernameTemplate = "<<some template>>"

func GetUserByUsernameBuilder() cobra.Command {
	opts := GetUserByUsernameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetUserByUsernameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.userName, "userName", "", "usage description")

	return cmd
}

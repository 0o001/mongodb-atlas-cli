// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type DeleteLegacySnapshotOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteLegacySnapshotOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteLegacySnapshotOpts) Run() error {
	params := &atlasv2.DeleteLegacySnapshotApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.DeleteLegacySnapshot(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteLegacySnapshotTemplate = "<<some template>>"

func DeleteLegacySnapshotBuilder() cobra.Command {
	opts := DeleteLegacySnapshotOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteLegacySnapshotTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type GetLegacyBackupCheckpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetLegacyBackupCheckpointOperation
	groupId string
	checkpointId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetLegacyBackupCheckpointOpts) Run() error {
	params := &atlasv2.GetLegacyBackupCheckpointApiParams{
		GroupId: opts.groupId,
		CheckpointId: opts.checkpointId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.GetLegacyBackupCheckpoint(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetLegacyBackupCheckpointTemplate = "<<some template>>"

func GetLegacyBackupCheckpointBuilder() cobra.Command {
	opts := GetLegacyBackupCheckpointOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetLegacyBackupCheckpointTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.checkpointId, "checkpointId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type GetLegacyBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetLegacyBackupRestoreJobOperation
	groupId string
	clusterName string
	jobId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetLegacyBackupRestoreJobOpts) Run() error {
	params := &atlasv2.GetLegacyBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		JobId: opts.jobId,
	}
	resp, _, err := opts.store.GetLegacyBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetLegacyBackupRestoreJobTemplate = "<<some template>>"

func GetLegacyBackupRestoreJobBuilder() cobra.Command {
	opts := GetLegacyBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetLegacyBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.jobId, "jobId", "", "usage description")

	return cmd
}
type GetLegacySnapshotOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetLegacySnapshotOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetLegacySnapshotOpts) Run() error {
	params := &atlasv2.GetLegacySnapshotApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.GetLegacySnapshot(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetLegacySnapshotTemplate = "<<some template>>"

func GetLegacySnapshotBuilder() cobra.Command {
	opts := GetLegacySnapshotOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetLegacySnapshotTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type GetLegacySnapshotScheduleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetLegacySnapshotScheduleOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetLegacySnapshotScheduleOpts) Run() error {
	params := &atlasv2.GetLegacySnapshotScheduleApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.GetLegacySnapshotSchedule(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetLegacySnapshotScheduleTemplate = "<<some template>>"

func GetLegacySnapshotScheduleBuilder() cobra.Command {
	opts := GetLegacySnapshotScheduleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetLegacySnapshotScheduleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type ListLegacyBackupCheckpointsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListLegacyBackupCheckpointsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListLegacyBackupCheckpointsOpts) Run() error {
	params := &atlasv2.ListLegacyBackupCheckpointsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListLegacyBackupCheckpoints(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListLegacyBackupCheckpointsTemplate = "<<some template>>"

func ListLegacyBackupCheckpointsBuilder() cobra.Command {
	opts := ListLegacyBackupCheckpointsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListLegacyBackupCheckpointsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListLegacyBackupRestoreJobsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListLegacyBackupRestoreJobsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	batchId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListLegacyBackupRestoreJobsOpts) Run() error {
	params := &atlasv2.ListLegacyBackupRestoreJobsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		BatchId: opts.batchId,
	}
	resp, _, err := opts.store.ListLegacyBackupRestoreJobs(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListLegacyBackupRestoreJobsTemplate = "<<some template>>"

func ListLegacyBackupRestoreJobsBuilder() cobra.Command {
	opts := ListLegacyBackupRestoreJobsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListLegacyBackupRestoreJobsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.batchId, "batchId", "", "usage description")

	return cmd
}
type ListLegacySnapshotsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListLegacySnapshotsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	completed string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListLegacySnapshotsOpts) Run() error {
	params := &atlasv2.ListLegacySnapshotsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		Completed: opts.completed,
	}
	resp, _, err := opts.store.ListLegacySnapshots(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListLegacySnapshotsTemplate = "<<some template>>"

func ListLegacySnapshotsBuilder() cobra.Command {
	opts := ListLegacySnapshotsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListLegacySnapshotsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.completed, "completed", "", "usage description")

	return cmd
}
type UpdateLegacySnapshotRetentionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateLegacySnapshotRetentionOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateLegacySnapshotRetentionOpts) Run() error {
	params := &atlasv2.UpdateLegacySnapshotRetentionApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.UpdateLegacySnapshotRetention(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateLegacySnapshotRetentionTemplate = "<<some template>>"

func UpdateLegacySnapshotRetentionBuilder() cobra.Command {
	opts := UpdateLegacySnapshotRetentionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateLegacySnapshotRetentionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type UpdateLegacySnapshotScheduleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateLegacySnapshotScheduleOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateLegacySnapshotScheduleOpts) Run() error {
	params := &atlasv2.UpdateLegacySnapshotScheduleApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.UpdateLegacySnapshotSchedule(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateLegacySnapshotScheduleTemplate = "<<some template>>"

func UpdateLegacySnapshotScheduleBuilder() cobra.Command {
	opts := UpdateLegacySnapshotScheduleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateLegacySnapshotScheduleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}

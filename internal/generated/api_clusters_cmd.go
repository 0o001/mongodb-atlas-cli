// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type GetClusterAdvancedConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetClusterAdvancedConfigurationOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetClusterAdvancedConfigurationOpts) Run() error {
	params := &atlasv2.GetClusterAdvancedConfigurationApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.GetClusterAdvancedConfiguration(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetClusterAdvancedConfigurationTemplate = "<<some template>>"

func GetClusterAdvancedConfigurationBuilder() cobra.Command {
	opts := GetClusterAdvancedConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetClusterAdvancedConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type GetClusterStatusOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetClusterStatusOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetClusterStatusOpts) Run() error {
	params := &atlasv2.GetClusterStatusApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.GetClusterStatus(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetClusterStatusTemplate = "<<some template>>"

func GetClusterStatusBuilder() cobra.Command {
	opts := GetClusterStatusOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetClusterStatusTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type GetSampleDatasetLoadStatusOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetSampleDatasetLoadStatusOperation
	groupId string
	sampleDatasetId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetSampleDatasetLoadStatusOpts) Run() error {
	params := &atlasv2.GetSampleDatasetLoadStatusApiParams{
		GroupId: opts.groupId,
		SampleDatasetId: opts.sampleDatasetId,
	}
	resp, _, err := opts.store.GetSampleDatasetLoadStatus(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetSampleDatasetLoadStatusTemplate = "<<some template>>"

func GetSampleDatasetLoadStatusBuilder() cobra.Command {
	opts := GetSampleDatasetLoadStatusOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetSampleDatasetLoadStatusTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.sampleDatasetId, "sampleDatasetId", "", "usage description")

	return cmd
}
type ListCloudProviderRegionsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListCloudProviderRegionsOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	providers []string
	tier string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListCloudProviderRegionsOpts) Run() error {
	params := &atlasv2.ListCloudProviderRegionsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		Providers: opts.providers,
		Tier: opts.tier,
	}
	resp, _, err := opts.store.ListCloudProviderRegions(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListCloudProviderRegionsTemplate = "<<some template>>"

func ListCloudProviderRegionsBuilder() cobra.Command {
	opts := ListCloudProviderRegionsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListCloudProviderRegionsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.providers, "providers", "", "usage description")
	cmd.Flags().StringVar(&opts.tier, "tier", "", "usage description")

	return cmd
}
type ListClustersForAllProjectsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListClustersForAllProjectsOperation
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListClustersForAllProjectsOpts) Run() error {
	params := &atlasv2.ListClustersForAllProjectsApiParams{
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListClustersForAllProjects(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListClustersForAllProjectsTemplate = "<<some template>>"

func ListClustersForAllProjectsBuilder() cobra.Command {
	opts := ListClustersForAllProjectsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListClustersForAllProjectsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type LoadSampleDatasetOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.LoadSampleDatasetOperation
	groupId string
	name string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *LoadSampleDatasetOpts) Run() error {
	params := &atlasv2.LoadSampleDatasetApiParams{
		GroupId: opts.groupId,
		Name: opts.name,
	}
	resp, _, err := opts.store.LoadSampleDataset(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const LoadSampleDatasetTemplate = "<<some template>>"

func LoadSampleDatasetBuilder() cobra.Command {
	opts := LoadSampleDatasetOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), LoadSampleDatasetTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.name, "name", "", "usage description")

	return cmd
}
type UpdateClusterAdvancedConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateClusterAdvancedConfigurationOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateClusterAdvancedConfigurationOpts) Run() error {
	params := &atlasv2.UpdateClusterAdvancedConfigurationApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.UpdateClusterAdvancedConfiguration(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateClusterAdvancedConfigurationTemplate = "<<some template>>"

func UpdateClusterAdvancedConfigurationBuilder() cobra.Command {
	opts := UpdateClusterAdvancedConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateClusterAdvancedConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type UpgradeSharedClusterOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpgradeSharedClusterOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpgradeSharedClusterOpts) Run() error {
	params := &atlasv2.UpgradeSharedClusterApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpgradeSharedCluster(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpgradeSharedClusterTemplate = "<<some template>>"

func UpgradeSharedClusterBuilder() cobra.Command {
	opts := UpgradeSharedClusterOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpgradeSharedClusterTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpgradeSharedClusterToServerlessOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpgradeSharedClusterToServerlessOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpgradeSharedClusterToServerlessOpts) Run() error {
	params := &atlasv2.UpgradeSharedClusterToServerlessApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpgradeSharedClusterToServerless(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpgradeSharedClusterToServerlessTemplate = "<<some template>>"

func UpgradeSharedClusterToServerlessBuilder() cobra.Command {
	opts := UpgradeSharedClusterToServerlessOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpgradeSharedClusterToServerlessTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

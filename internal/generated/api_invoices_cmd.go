// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type DownloadInvoiceCSVOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
	invoiceId string
}

func (opts *DownloadInvoiceCSVOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DownloadInvoiceCSVOpts) Run(ctx context.Context) error {
	params := &admin.DownloadInvoiceCSVApiParams{
		OrgId: opts.orgId,
		InvoiceId: opts.invoiceId,
	}
	_, err := opts.client.InvoicesApi.DownloadInvoiceCSVWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func DownloadInvoiceCSVBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DownloadInvoiceCSVOpts{}
	cmd := &cobra.Command{
		Use:     "downloadInvoiceCSV",
		// Aliases: []string{"?"},
		Short:   "Return One Organization Invoice as CSV",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", , "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")
	cmd.Flags().StringVar(&opts.invoiceId, "invoiceId", , "Unique 24-hexadecimal digit string that identifies the invoice submitted to the specified organization. Charges typically post the next day.")

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("invoiceId")

	return cmd
}
type GetInvoiceOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
	invoiceId string
}

func (opts *GetInvoiceOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetInvoiceOpts) Run(ctx context.Context) error {
	params := &admin.GetInvoiceApiParams{
		OrgId: opts.orgId,
		InvoiceId: opts.invoiceId,
	}
	resp, _, err := opts.client.InvoicesApi.GetInvoiceWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetInvoiceBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetInvoiceOpts{}
	cmd := &cobra.Command{
		Use:     "getInvoice",
		// Aliases: []string{"?"},
		Short:   "Return One Organization Invoice",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", , "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")
	cmd.Flags().StringVar(&opts.invoiceId, "invoiceId", , "Unique 24-hexadecimal digit string that identifies the invoice submitted to the specified organization. Charges typically post the next day.")

	_ = cmd.MarkFlagRequired("orgId")
	_ = cmd.MarkFlagRequired("invoiceId")

	return cmd
}
type ListInvoicesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListInvoicesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListInvoicesOpts) Run(ctx context.Context) error {
	params := &admin.ListInvoicesApiParams{
		OrgId: opts.orgId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.client.InvoicesApi.ListInvoicesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListInvoicesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListInvoicesOpts{}
	cmd := &cobra.Command{
		Use:     "listInvoices",
		// Aliases: []string{"?"},
		Short:   "Return All Invoices for One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", , "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", true, "Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", 100, "Number of items that the response returns per page.")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", 1, "Number of the page that displays the current set of the total objects that the response returns.")

	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type ListPendingInvoicesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
}

func (opts *ListPendingInvoicesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListPendingInvoicesOpts) Run(ctx context.Context) error {
	params := &admin.ListPendingInvoicesApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.InvoicesApi.ListPendingInvoicesWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListPendingInvoicesBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListPendingInvoicesOpts{}
	cmd := &cobra.Command{
		Use:     "listPendingInvoices",
		// Aliases: []string{"?"},
		Short:   "Return All Pending Invoices for One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", , "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")

	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}

func InvoicesBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "invoices",
		Short:   "Returns invoices.",
	}
	cmd.AddCommand(
		DownloadInvoiceCSVBuilder(),
		GetInvoiceBuilder(),
		ListInvoicesBuilder(),
		ListPendingInvoicesBuilder(),
	)
	return cmd
}

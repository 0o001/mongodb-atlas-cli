// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateProjectIpAccessListOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateProjectIpAccessListOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateProjectIpAccessListOpts) Run() error {
	params := &atlasv2.CreateProjectIpAccessListApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.CreateProjectIpAccessList(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateProjectIpAccessListTemplate = "<<some template>>"

func CreateProjectIpAccessListBuilder() cobra.Command {
	opts := CreateProjectIpAccessListOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateProjectIpAccessListTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type DeleteProjectIpAccessListOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteProjectIpAccessListOperation
	groupId string
	entryValue string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteProjectIpAccessListOpts) Run() error {
	params := &atlasv2.DeleteProjectIpAccessListApiParams{
		GroupId: opts.groupId,
		EntryValue: opts.entryValue,
	}
	resp, _, err := opts.store.DeleteProjectIpAccessList(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteProjectIpAccessListTemplate = "<<some template>>"

func DeleteProjectIpAccessListBuilder() cobra.Command {
	opts := DeleteProjectIpAccessListOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteProjectIpAccessListTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.entryValue, "entryValue", "", "usage description")

	return cmd
}
type GetProjectIpAccessListStatusOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectIpAccessListStatusOperation
	groupId string
	entryValue string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectIpAccessListStatusOpts) Run() error {
	params := &atlasv2.GetProjectIpAccessListStatusApiParams{
		GroupId: opts.groupId,
		EntryValue: opts.entryValue,
	}
	resp, _, err := opts.store.GetProjectIpAccessListStatus(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectIpAccessListStatusTemplate = "<<some template>>"

func GetProjectIpAccessListStatusBuilder() cobra.Command {
	opts := GetProjectIpAccessListStatusOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectIpAccessListStatusTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.entryValue, "entryValue", "", "usage description")

	return cmd
}
type GetProjectIpListOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetProjectIpListOperation
	groupId string
	entryValue string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetProjectIpListOpts) Run() error {
	params := &atlasv2.GetProjectIpListApiParams{
		GroupId: opts.groupId,
		EntryValue: opts.entryValue,
	}
	resp, _, err := opts.store.GetProjectIpList(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectIpListTemplate = "<<some template>>"

func GetProjectIpListBuilder() cobra.Command {
	opts := GetProjectIpListOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectIpListTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.entryValue, "entryValue", "", "usage description")

	return cmd
}
type ListProjectIpAccessListsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectIpAccessListsOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectIpAccessListsOpts) Run() error {
	params := &atlasv2.ListProjectIpAccessListsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListProjectIpAccessLists(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectIpAccessListsTemplate = "<<some template>>"

func ListProjectIpAccessListsBuilder() cobra.Command {
	opts := ListProjectIpAccessListsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectIpAccessListsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type DisableSlowOperationThresholdingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *DisableSlowOperationThresholdingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DisableSlowOperationThresholdingOpts) Run(ctx context.Context) error {
	params := &admin.DisableSlowOperationThresholdingApiParams{
		GroupId: opts.groupId,
	}
	_, err := opts.client.PerformanceAdvisorApi.DisableSlowOperationThresholdingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DisableSlowOperationThresholdingTemplate = "<<some template>>"

func DisableSlowOperationThresholdingBuilder() cobra.Command {
	opts := DisableSlowOperationThresholdingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DisableSlowOperationThresholdingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type EnableSlowOperationThresholdingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *EnableSlowOperationThresholdingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *EnableSlowOperationThresholdingOpts) Run(ctx context.Context) error {
	params := &admin.EnableSlowOperationThresholdingApiParams{
		GroupId: opts.groupId,
	}
	_, err := opts.client.PerformanceAdvisorApi.EnableSlowOperationThresholdingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const EnableSlowOperationThresholdingTemplate = "<<some template>>"

func EnableSlowOperationThresholdingBuilder() cobra.Command {
	opts := EnableSlowOperationThresholdingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), EnableSlowOperationThresholdingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type ListSlowQueriesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	processId string
	duration int64
	namespaces []string
	nLogs int64
	since int64
}

func (opts *ListSlowQueriesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListSlowQueriesOpts) Run(ctx context.Context) error {
	params := &admin.ListSlowQueriesApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		Duration: opts.duration,
		Namespaces: opts.namespaces,
		NLogs: opts.nLogs,
		Since: opts.since,
	}
	resp, _, err := opts.client.PerformanceAdvisorApi.ListSlowQueriesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListSlowQueriesTemplate = "<<some template>>"

func ListSlowQueriesBuilder() cobra.Command {
	opts := ListSlowQueriesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListSlowQueriesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	_ = cmd.MarkFlagRequired("processId")
	cmd.Flags().StringVar(&opts.duration, "duration", "", "usage description")
	cmd.Flags().StringVar(&opts.namespaces, "namespaces", "", "usage description")
	cmd.Flags().StringVar(&opts.nLogs, "nLogs", "", "usage description")
	cmd.Flags().StringVar(&opts.since, "since", "", "usage description")

	return cmd
}
type ListSlowQueryNamespacesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	processId string
	duration int64
	since int64
}

func (opts *ListSlowQueryNamespacesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListSlowQueryNamespacesOpts) Run(ctx context.Context) error {
	params := &admin.ListSlowQueryNamespacesApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		Duration: opts.duration,
		Since: opts.since,
	}
	resp, _, err := opts.client.PerformanceAdvisorApi.ListSlowQueryNamespacesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListSlowQueryNamespacesTemplate = "<<some template>>"

func ListSlowQueryNamespacesBuilder() cobra.Command {
	opts := ListSlowQueryNamespacesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListSlowQueryNamespacesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	_ = cmd.MarkFlagRequired("processId")
	cmd.Flags().StringVar(&opts.duration, "duration", "", "usage description")
	cmd.Flags().StringVar(&opts.since, "since", "", "usage description")

	return cmd
}
type ListSuggestedIndexesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	processId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	duration int64
	namespaces []string
	nExamples int64
	nIndexes int64
	since int64
}

func (opts *ListSuggestedIndexesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListSuggestedIndexesOpts) Run(ctx context.Context) error {
	params := &admin.ListSuggestedIndexesApiParams{
		GroupId: opts.groupId,
		ProcessId: opts.processId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		Duration: opts.duration,
		Namespaces: opts.namespaces,
		NExamples: opts.nExamples,
		NIndexes: opts.nIndexes,
		Since: opts.since,
	}
	resp, _, err := opts.client.PerformanceAdvisorApi.ListSuggestedIndexesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListSuggestedIndexesTemplate = "<<some template>>"

func ListSuggestedIndexesBuilder() cobra.Command {
	opts := ListSuggestedIndexesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListSuggestedIndexesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.processId, "processId", "", "usage description")
	_ = cmd.MarkFlagRequired("processId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.duration, "duration", "", "usage description")
	cmd.Flags().StringVar(&opts.namespaces, "namespaces", "", "usage description")
	cmd.Flags().StringVar(&opts.nExamples, "nExamples", "", "usage description")
	cmd.Flags().StringVar(&opts.nIndexes, "nIndexes", "", "usage description")
	cmd.Flags().StringVar(&opts.since, "since", "", "usage description")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_data_federation_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreateDataFederationPrivateEndpointOperation, CreateFederatedDatabaseOperation, CreateOneDataFederationQueryLimitOperation, DeleteDataFederationPrivateEndpointOperation, DeleteFederatedDatabaseOperation, DeleteOneDataFederationInstanceQueryLimitOperation, DownloadFederatedDatabaseQueryLogsOperation, GetDataFederationPrivateEndpointOperation, GetFederatedDatabaseOperation, ListDataFederationPrivateEndpointsOperation, ListFederatedDatabasesOperation, ReturnFederatedDatabaseQueryLimitOperation, ReturnFederatedDatabaseQueryLimitsOperation, UpdateFederatedDatabaseOperation

type CreateDataFederationPrivateEndpointOperation interface {
	CreateDataFederationPrivateEndpoint (*atlasv2.CreateDataFederationPrivateEndpointApiParams) (*atlasv2.PaginatedPrivateNetworkEndpointIdEntry, error)
}

// CreateDataFederationPrivateEndpoint encapsulates the logic to manage different cloud providers.
func (s *Store) CreateDataFederationPrivateEndpoint(params *atlasv2.CreateDataFederationPrivateEndpointApiParams) (*atlasv2.PaginatedPrivateNetworkEndpointIdEntry, error) {
	result, _, err := s.clientv2.DataFederationApi.CreateDataFederationPrivateEndpointWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateFederatedDatabaseOperation interface {
	CreateFederatedDatabase (*atlasv2.CreateFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error)
}

// CreateFederatedDatabase encapsulates the logic to manage different cloud providers.
func (s *Store) CreateFederatedDatabase(params *atlasv2.CreateFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error) {
	result, _, err := s.clientv2.DataFederationApi.CreateFederatedDatabaseWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateOneDataFederationQueryLimitOperation interface {
	CreateOneDataFederationQueryLimit (*atlasv2.CreateOneDataFederationQueryLimitApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error)
}

// CreateOneDataFederationQueryLimit encapsulates the logic to manage different cloud providers.
func (s *Store) CreateOneDataFederationQueryLimit(params *atlasv2.CreateOneDataFederationQueryLimitApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error) {
	result, _, err := s.clientv2.DataFederationApi.CreateOneDataFederationQueryLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteDataFederationPrivateEndpointOperation interface {
	DeleteDataFederationPrivateEndpoint (*atlasv2.DeleteDataFederationPrivateEndpointApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteDataFederationPrivateEndpoint encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteDataFederationPrivateEndpoint(params *atlasv2.DeleteDataFederationPrivateEndpointApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DataFederationApi.DeleteDataFederationPrivateEndpointWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteFederatedDatabaseOperation interface {
	DeleteFederatedDatabase (*atlasv2.DeleteFederatedDatabaseApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteFederatedDatabase encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteFederatedDatabase(params *atlasv2.DeleteFederatedDatabaseApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DataFederationApi.DeleteFederatedDatabaseWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteOneDataFederationInstanceQueryLimitOperation interface {
	DeleteOneDataFederationInstanceQueryLimit (*atlasv2.DeleteOneDataFederationInstanceQueryLimitApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteOneDataFederationInstanceQueryLimit encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteOneDataFederationInstanceQueryLimit(params *atlasv2.DeleteOneDataFederationInstanceQueryLimitApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DataFederationApi.DeleteOneDataFederationInstanceQueryLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type DownloadFederatedDatabaseQueryLogsOperation interface {
	DownloadFederatedDatabaseQueryLogs (*atlasv2.DownloadFederatedDatabaseQueryLogsApiParams) (*atlasv2.*os.File, error)
}

// DownloadFederatedDatabaseQueryLogs encapsulates the logic to manage different cloud providers.
func (s *Store) DownloadFederatedDatabaseQueryLogs(params *atlasv2.DownloadFederatedDatabaseQueryLogsApiParams) (*atlasv2.*os.File, error) {
	result, _, err := s.clientv2.DataFederationApi.DownloadFederatedDatabaseQueryLogsWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetDataFederationPrivateEndpointOperation interface {
	GetDataFederationPrivateEndpoint (*atlasv2.GetDataFederationPrivateEndpointApiParams) (*atlasv2.PrivateNetworkEndpointIdEntry, error)
}

// GetDataFederationPrivateEndpoint encapsulates the logic to manage different cloud providers.
func (s *Store) GetDataFederationPrivateEndpoint(params *atlasv2.GetDataFederationPrivateEndpointApiParams) (*atlasv2.PrivateNetworkEndpointIdEntry, error) {
	result, _, err := s.clientv2.DataFederationApi.GetDataFederationPrivateEndpointWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetFederatedDatabaseOperation interface {
	GetFederatedDatabase (*atlasv2.GetFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error)
}

// GetFederatedDatabase encapsulates the logic to manage different cloud providers.
func (s *Store) GetFederatedDatabase(params *atlasv2.GetFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error) {
	result, _, err := s.clientv2.DataFederationApi.GetFederatedDatabaseWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListDataFederationPrivateEndpointsOperation interface {
	ListDataFederationPrivateEndpoints (*atlasv2.ListDataFederationPrivateEndpointsApiParams) (*atlasv2.PaginatedPrivateNetworkEndpointIdEntry, error)
}

// ListDataFederationPrivateEndpoints encapsulates the logic to manage different cloud providers.
func (s *Store) ListDataFederationPrivateEndpoints(params *atlasv2.ListDataFederationPrivateEndpointsApiParams) (*atlasv2.PaginatedPrivateNetworkEndpointIdEntry, error) {
	result, _, err := s.clientv2.DataFederationApi.ListDataFederationPrivateEndpointsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListFederatedDatabasesOperation interface {
	ListFederatedDatabases (*atlasv2.ListFederatedDatabasesApiParams) (*atlasv2.[]DataLakeTenant, error)
}

// ListFederatedDatabases encapsulates the logic to manage different cloud providers.
func (s *Store) ListFederatedDatabases(params *atlasv2.ListFederatedDatabasesApiParams) (*atlasv2.[]DataLakeTenant, error) {
	result, _, err := s.clientv2.DataFederationApi.ListFederatedDatabasesWithParams(s.ctx, params).Execute()
	return &result, err
}

type ReturnFederatedDatabaseQueryLimitOperation interface {
	ReturnFederatedDatabaseQueryLimit (*atlasv2.ReturnFederatedDatabaseQueryLimitApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error)
}

// ReturnFederatedDatabaseQueryLimit encapsulates the logic to manage different cloud providers.
func (s *Store) ReturnFederatedDatabaseQueryLimit(params *atlasv2.ReturnFederatedDatabaseQueryLimitApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error) {
	result, _, err := s.clientv2.DataFederationApi.ReturnFederatedDatabaseQueryLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type ReturnFederatedDatabaseQueryLimitsOperation interface {
	ReturnFederatedDatabaseQueryLimits (*atlasv2.ReturnFederatedDatabaseQueryLimitsApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error)
}

// ReturnFederatedDatabaseQueryLimits encapsulates the logic to manage different cloud providers.
func (s *Store) ReturnFederatedDatabaseQueryLimits(params *atlasv2.ReturnFederatedDatabaseQueryLimitsApiParams) (*atlasv2.[]DataFederationTenantQueryLimit, error) {
	result, _, err := s.clientv2.DataFederationApi.ReturnFederatedDatabaseQueryLimitsWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateFederatedDatabaseOperation interface {
	UpdateFederatedDatabase (*atlasv2.UpdateFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error)
}

// UpdateFederatedDatabase encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateFederatedDatabase(params *atlasv2.UpdateFederatedDatabaseApiParams) (*atlasv2.DataLakeTenant, error) {
	result, _, err := s.clientv2.DataFederationApi.UpdateFederatedDatabaseWithParams(s.ctx, params).Execute()
	return &result, err
}


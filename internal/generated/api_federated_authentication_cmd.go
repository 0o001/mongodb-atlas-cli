// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
	
}

func (opts *CreateRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.CreateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.CreateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func CreateRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := CreateRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "createRoleMapping",
		// Aliases: []string{"?"},
		Short:   "Add One Role Mapping to One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")
	

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type DeleteFederationAppOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *DeleteFederationAppOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteFederationAppOpts) Run(ctx context.Context) error {
	params := &admin.DeleteFederationAppApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteFederationAppWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func DeleteFederationAppBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DeleteFederationAppOpts{}
	cmd := &cobra.Command{
		Use:     "deleteFederationApp",
		// Aliases: []string{"?"},
		Short:   "Delete the federation settings instance.",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type DeleteRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *DeleteRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.DeleteRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

func DeleteRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DeleteRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "deleteRoleMapping",
		// Aliases: []string{"?"},
		Short:   "Remove One Role Mapping from One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.id, "id", "", "Unique 24-hexadecimal digit string that identifies the role mapping that you want to remove.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type GetConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *GetConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.GetConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "getConnectedOrgConfig",
		// Aliases: []string{"?"},
		Short:   "Return One Org Config Connected to One Federation",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the connected organization configuration to return.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type GetFederationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	orgId string
}

func (opts *GetFederationSettingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetFederationSettingsOpts) Run(ctx context.Context) error {
	params := &admin.GetFederationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetFederationSettingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetFederationSettingsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetFederationSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "getFederationSettings",
		// Aliases: []string{"?"},
		Short:   "Return Federation Settings for One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")

	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type GetIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *GetIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetIdentityProviderBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:     "getIdentityProvider",
		// Aliases: []string{"?"},
		Short:   "Return one identity provider from the specified federation.",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "Unique 20-hexadecimal digit string that identifies the identity provider.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type GetIdentityProviderMetadataOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *GetIdentityProviderMetadataOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetIdentityProviderMetadataOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderMetadataApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderMetadataWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetIdentityProviderMetadataBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetIdentityProviderMetadataOpts{}
	cmd := &cobra.Command{
		Use:     "getIdentityProviderMetadata",
		// Aliases: []string{"?"},
		Short:   "Return the metadata of one identity provider in the specified federation.",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "Unique 20-hexadecimal digit string that identifies the identity provider.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type GetRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *GetRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.GetRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "getRoleMapping",
		// Aliases: []string{"?"},
		Short:   "Return One Role Mapping from One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.id, "id", "", "Unique 24-hexadecimal digit string that identifies the role mapping that you want to return.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type ListConnectedOrgConfigsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *ListConnectedOrgConfigsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListConnectedOrgConfigsOpts) Run(ctx context.Context) error {
	params := &admin.ListConnectedOrgConfigsApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListConnectedOrgConfigsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListConnectedOrgConfigsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListConnectedOrgConfigsOpts{}
	cmd := &cobra.Command{
		Use:     "listConnectedOrgConfigs",
		// Aliases: []string{"?"},
		Short:   "Return All Connected Org Configs from the Federation",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type ListIdentityProvidersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
}

func (opts *ListIdentityProvidersOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListIdentityProvidersOpts) Run(ctx context.Context) error {
	params := &admin.ListIdentityProvidersApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListIdentityProvidersWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListIdentityProvidersBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListIdentityProvidersOpts{}
	cmd := &cobra.Command{
		Use:     "listIdentityProviders",
		// Aliases: []string{"?"},
		Short:   "Return all identity providers from the specified federation.",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	return cmd
}
type ListRoleMappingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *ListRoleMappingsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListRoleMappingsOpts) Run(ctx context.Context) error {
	params := &admin.ListRoleMappingsApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListRoleMappingsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListRoleMappingsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListRoleMappingsOpts{}
	cmd := &cobra.Command{
		Use:     "listRoleMappings",
		// Aliases: []string{"?"},
		Short:   "Return All Role Mappings from One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type RemoveConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *RemoveConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *RemoveConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.RemoveConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.RemoveConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func RemoveConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := RemoveConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "removeConnectedOrgConfig",
		// Aliases: []string{"?"},
		Short:   "Remove One Org Config Connected to One Federation",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the connected organization configuration to remove.")

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type UpdateConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	orgId string
	
}

func (opts *UpdateConnectedOrgConfigOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.UpdateConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateConnectedOrgConfigWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func UpdateConnectedOrgConfigBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := UpdateConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "updateConnectedOrgConfig",
		// Aliases: []string{"?"},
		Short:   "Update One Org Config Connected to One Federation",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the connected organization configuration to update.")
	

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}
type UpdateIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	identityProviderId string
	
}

func (opts *UpdateIdentityProviderOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.UpdateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateIdentityProviderWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func UpdateIdentityProviderBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := UpdateIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:     "updateIdentityProvider",
		// Aliases: []string{"?"},
		Short:   "Update the identity provider.",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "Unique 20-hexadecimal digit string that identifies the identity provider.")
	

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("identityProviderId")
	return cmd
}
type UpdateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	federationSettingsId string
	id string
	orgId string
	
}

func (opts *UpdateRoleMappingOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.UpdateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
		
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateRoleMappingWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func UpdateRoleMappingBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := UpdateRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "updateRoleMapping",
		// Aliases: []string{"?"},
		Short:   "Update One Role Mapping in One Organization",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "Unique 24-hexadecimal digit string that identifies your federation.")
	cmd.Flags().StringVar(&opts.id, "id", "", "Unique 24-hexadecimal digit string that identifies the role mapping that you want to update.")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")
	

	_ = cmd.MarkFlagRequired("federationSettingsId")
	_ = cmd.MarkFlagRequired("id")
	_ = cmd.MarkFlagRequired("orgId")
	return cmd
}

func FederatedAuthenticationBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "federatedAuthentication",
		Short:   "Returns, adds, edits, and removes federation-related features such as role mappings and connected organization configurations.",
	}
	cmd.AddCommand(
		CreateRoleMappingBuilder(),
		DeleteFederationAppBuilder(),
		DeleteRoleMappingBuilder(),
		GetConnectedOrgConfigBuilder(),
		GetFederationSettingsBuilder(),
		GetIdentityProviderBuilder(),
		GetIdentityProviderMetadataBuilder(),
		GetRoleMappingBuilder(),
		ListConnectedOrgConfigsBuilder(),
		ListIdentityProvidersBuilder(),
		ListRoleMappingsBuilder(),
		RemoveConnectedOrgConfigBuilder(),
		UpdateConnectedOrgConfigBuilder(),
		UpdateIdentityProviderBuilder(),
		UpdateRoleMappingBuilder(),
	)
	return cmd
}


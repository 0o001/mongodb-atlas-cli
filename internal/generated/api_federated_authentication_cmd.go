// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *CreateRoleMappingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.CreateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.CreateRoleMappingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateRoleMappingTemplate = "<<some template>>"

func CreateRoleMappingBuilder() cobra.Command {
	opts := CreateRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateRoleMappingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type DeleteFederationAppOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
}

func (opts *DeleteFederationAppOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteFederationAppOpts) Run(ctx context.Context) error {
	params := &admin.DeleteFederationAppApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteFederationAppWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DeleteFederationAppTemplate = "<<some template>>"

func DeleteFederationAppBuilder() cobra.Command {
	opts := DeleteFederationAppOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteFederationAppTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")

	return cmd
}
type DeleteRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *DeleteRoleMappingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.DeleteRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	_, err := opts.client.FederatedAuthenticationApi.DeleteRoleMappingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DeleteRoleMappingTemplate = "<<some template>>"

func DeleteRoleMappingBuilder() cobra.Command {
	opts := DeleteRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteRoleMappingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.id, "id", "", "usage description")
	_ = cmd.MarkFlagRequired("id")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type GetConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *GetConnectedOrgConfigOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.GetConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetConnectedOrgConfigWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetConnectedOrgConfigTemplate = "<<some template>>"

func GetConnectedOrgConfigBuilder() cobra.Command {
	opts := GetConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetConnectedOrgConfigTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type GetFederationSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	orgId string
}

func (opts *GetFederationSettingsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetFederationSettingsOpts) Run(ctx context.Context) error {
	params := &admin.GetFederationSettingsApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetFederationSettingsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetFederationSettingsTemplate = "<<some template>>"

func GetFederationSettingsBuilder() cobra.Command {
	opts := GetFederationSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetFederationSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type GetIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *GetIdentityProviderOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetIdentityProviderTemplate = "<<some template>>"

func GetIdentityProviderBuilder() cobra.Command {
	opts := GetIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetIdentityProviderTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "usage description")
	_ = cmd.MarkFlagRequired("identityProviderId")

	return cmd
}
type GetIdentityProviderMetadataOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *GetIdentityProviderMetadataOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetIdentityProviderMetadataOpts) Run(ctx context.Context) error {
	params := &admin.GetIdentityProviderMetadataApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetIdentityProviderMetadataWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetIdentityProviderMetadataTemplate = "<<some template>>"

func GetIdentityProviderMetadataBuilder() cobra.Command {
	opts := GetIdentityProviderMetadataOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetIdentityProviderMetadataTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "usage description")
	_ = cmd.MarkFlagRequired("identityProviderId")

	return cmd
}
type GetRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *GetRoleMappingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.GetRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.GetRoleMappingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetRoleMappingTemplate = "<<some template>>"

func GetRoleMappingBuilder() cobra.Command {
	opts := GetRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetRoleMappingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.id, "id", "", "usage description")
	_ = cmd.MarkFlagRequired("id")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type ListConnectedOrgConfigsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
}

func (opts *ListConnectedOrgConfigsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListConnectedOrgConfigsOpts) Run(ctx context.Context) error {
	params := &admin.ListConnectedOrgConfigsApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListConnectedOrgConfigsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListConnectedOrgConfigsTemplate = "<<some template>>"

func ListConnectedOrgConfigsBuilder() cobra.Command {
	opts := ListConnectedOrgConfigsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListConnectedOrgConfigsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")

	return cmd
}
type ListIdentityProvidersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
}

func (opts *ListIdentityProvidersOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListIdentityProvidersOpts) Run(ctx context.Context) error {
	params := &admin.ListIdentityProvidersApiParams{
		FederationSettingsId: opts.federationSettingsId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListIdentityProvidersWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListIdentityProvidersTemplate = "<<some template>>"

func ListIdentityProvidersBuilder() cobra.Command {
	opts := ListIdentityProvidersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListIdentityProvidersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")

	return cmd
}
type ListRoleMappingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *ListRoleMappingsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListRoleMappingsOpts) Run(ctx context.Context) error {
	params := &admin.ListRoleMappingsApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.ListRoleMappingsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListRoleMappingsTemplate = "<<some template>>"

func ListRoleMappingsBuilder() cobra.Command {
	opts := ListRoleMappingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListRoleMappingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type RemoveConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *RemoveConnectedOrgConfigOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *RemoveConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.RemoveConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.RemoveConnectedOrgConfigWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const RemoveConnectedOrgConfigTemplate = "<<some template>>"

func RemoveConnectedOrgConfigBuilder() cobra.Command {
	opts := RemoveConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveConnectedOrgConfigTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type UpdateConnectedOrgConfigOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	orgId string
}

func (opts *UpdateConnectedOrgConfigOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateConnectedOrgConfigOpts) Run(ctx context.Context) error {
	params := &admin.UpdateConnectedOrgConfigApiParams{
		FederationSettingsId: opts.federationSettingsId,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateConnectedOrgConfigWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateConnectedOrgConfigTemplate = "<<some template>>"

func UpdateConnectedOrgConfigBuilder() cobra.Command {
	opts := UpdateConnectedOrgConfigOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateConnectedOrgConfigTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}
type UpdateIdentityProviderOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	identityProviderId string
}

func (opts *UpdateIdentityProviderOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateIdentityProviderOpts) Run(ctx context.Context) error {
	params := &admin.UpdateIdentityProviderApiParams{
		FederationSettingsId: opts.federationSettingsId,
		IdentityProviderId: opts.identityProviderId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateIdentityProviderWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateIdentityProviderTemplate = "<<some template>>"

func UpdateIdentityProviderBuilder() cobra.Command {
	opts := UpdateIdentityProviderOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateIdentityProviderTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.identityProviderId, "identityProviderId", "", "usage description")
	_ = cmd.MarkFlagRequired("identityProviderId")

	return cmd
}
type UpdateRoleMappingOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	federationSettingsId string
	id string
	orgId string
}

func (opts *UpdateRoleMappingOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateRoleMappingOpts) Run(ctx context.Context) error {
	params := &admin.UpdateRoleMappingApiParams{
		FederationSettingsId: opts.federationSettingsId,
		Id: opts.id,
		OrgId: opts.orgId,
	}
	resp, _, err := opts.client.FederatedAuthenticationApi.UpdateRoleMappingWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateRoleMappingTemplate = "<<some template>>"

func UpdateRoleMappingBuilder() cobra.Command {
	opts := UpdateRoleMappingOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateRoleMappingTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.federationSettingsId, "federationSettingsId", "", "usage description")
	_ = cmd.MarkFlagRequired("federationSettingsId")
	cmd.Flags().StringVar(&opts.id, "id", "", "usage description")
	_ = cmd.MarkFlagRequired("id")
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")

	return cmd
}

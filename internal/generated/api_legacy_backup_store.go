// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_legacy_backup_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas DeleteLegacySnapshotOperation, GetLegacyBackupCheckpointOperation, GetLegacyBackupRestoreJobOperation, GetLegacySnapshotOperation, GetLegacySnapshotScheduleOperation, ListLegacyBackupCheckpointsOperation, ListLegacyBackupRestoreJobsOperation, ListLegacySnapshotsOperation, UpdateLegacySnapshotRetentionOperation, UpdateLegacySnapshotScheduleOperation

type DeleteLegacySnapshotOperation interface {
	DeleteLegacySnapshot (*atlasv2.DeleteLegacySnapshotApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteLegacySnapshot encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteLegacySnapshot(params *atlasv2.DeleteLegacySnapshotApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.LegacyBackupApi.DeleteLegacySnapshotWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetLegacyBackupCheckpointOperation interface {
	GetLegacyBackupCheckpoint (*atlasv2.GetLegacyBackupCheckpointApiParams) (*atlasv2.Checkpoint, error)
}

// GetLegacyBackupCheckpoint encapsulates the logic to manage different cloud providers.
func (s *Store) GetLegacyBackupCheckpoint(params *atlasv2.GetLegacyBackupCheckpointApiParams) (*atlasv2.Checkpoint, error) {
	result, _, err := s.clientv2.LegacyBackupApi.GetLegacyBackupCheckpointWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetLegacyBackupRestoreJobOperation interface {
	GetLegacyBackupRestoreJob (*atlasv2.GetLegacyBackupRestoreJobApiParams) (*atlasv2.RestoreJob, error)
}

// GetLegacyBackupRestoreJob encapsulates the logic to manage different cloud providers.
func (s *Store) GetLegacyBackupRestoreJob(params *atlasv2.GetLegacyBackupRestoreJobApiParams) (*atlasv2.RestoreJob, error) {
	result, _, err := s.clientv2.LegacyBackupApi.GetLegacyBackupRestoreJobWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetLegacySnapshotOperation interface {
	GetLegacySnapshot (*atlasv2.GetLegacySnapshotApiParams) (*atlasv2.Snapshot, error)
}

// GetLegacySnapshot encapsulates the logic to manage different cloud providers.
func (s *Store) GetLegacySnapshot(params *atlasv2.GetLegacySnapshotApiParams) (*atlasv2.Snapshot, error) {
	result, _, err := s.clientv2.LegacyBackupApi.GetLegacySnapshotWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetLegacySnapshotScheduleOperation interface {
	GetLegacySnapshotSchedule (*atlasv2.GetLegacySnapshotScheduleApiParams) (*atlasv2.SnapshotSchedule, error)
}

// GetLegacySnapshotSchedule encapsulates the logic to manage different cloud providers.
func (s *Store) GetLegacySnapshotSchedule(params *atlasv2.GetLegacySnapshotScheduleApiParams) (*atlasv2.SnapshotSchedule, error) {
	result, _, err := s.clientv2.LegacyBackupApi.GetLegacySnapshotScheduleWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListLegacyBackupCheckpointsOperation interface {
	ListLegacyBackupCheckpoints (*atlasv2.ListLegacyBackupCheckpointsApiParams) (*atlasv2.PaginatedApiAtlasCheckpoint, error)
}

// ListLegacyBackupCheckpoints encapsulates the logic to manage different cloud providers.
func (s *Store) ListLegacyBackupCheckpoints(params *atlasv2.ListLegacyBackupCheckpointsApiParams) (*atlasv2.PaginatedApiAtlasCheckpoint, error) {
	result, _, err := s.clientv2.LegacyBackupApi.ListLegacyBackupCheckpointsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListLegacyBackupRestoreJobsOperation interface {
	ListLegacyBackupRestoreJobs (*atlasv2.ListLegacyBackupRestoreJobsApiParams) (*atlasv2.PaginatedRestoreJob, error)
}

// ListLegacyBackupRestoreJobs encapsulates the logic to manage different cloud providers.
func (s *Store) ListLegacyBackupRestoreJobs(params *atlasv2.ListLegacyBackupRestoreJobsApiParams) (*atlasv2.PaginatedRestoreJob, error) {
	result, _, err := s.clientv2.LegacyBackupApi.ListLegacyBackupRestoreJobsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListLegacySnapshotsOperation interface {
	ListLegacySnapshots (*atlasv2.ListLegacySnapshotsApiParams) (*atlasv2.PaginatedSnapshot, error)
}

// ListLegacySnapshots encapsulates the logic to manage different cloud providers.
func (s *Store) ListLegacySnapshots(params *atlasv2.ListLegacySnapshotsApiParams) (*atlasv2.PaginatedSnapshot, error) {
	result, _, err := s.clientv2.LegacyBackupApi.ListLegacySnapshotsWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateLegacySnapshotRetentionOperation interface {
	UpdateLegacySnapshotRetention (*atlasv2.UpdateLegacySnapshotRetentionApiParams) (*atlasv2.Snapshot, error)
}

// UpdateLegacySnapshotRetention encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateLegacySnapshotRetention(params *atlasv2.UpdateLegacySnapshotRetentionApiParams) (*atlasv2.Snapshot, error) {
	result, _, err := s.clientv2.LegacyBackupApi.UpdateLegacySnapshotRetentionWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateLegacySnapshotScheduleOperation interface {
	UpdateLegacySnapshotSchedule (*atlasv2.UpdateLegacySnapshotScheduleApiParams) (*atlasv2.SnapshotSchedule, error)
}

// UpdateLegacySnapshotSchedule encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateLegacySnapshotSchedule(params *atlasv2.UpdateLegacySnapshotScheduleApiParams) (*atlasv2.SnapshotSchedule, error) {
	result, _, err := s.clientv2.LegacyBackupApi.UpdateLegacySnapshotScheduleWithParams(s.ctx, params).Execute()
	return &result, err
}


// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_ldap_configuration_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas DeleteLDAPConfigurationOperation, GetLDAPConfigurationOperation, GetLDAPConfigurationStatusOperation, SaveLDAPConfigurationOperation, VerifyLDAPConfigurationOperation

type DeleteLDAPConfigurationOperation interface {
	DeleteLDAPConfiguration (*atlasv2.DeleteLDAPConfigurationApiParams) (, error)
}

// DeleteLDAPConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteLDAPConfiguration(params *atlasv2.DeleteLDAPConfigurationApiParams) (error) {
	_, err := s.clientv2.LDAPConfigurationApi.DeleteLDAPConfigurationWithParams(s.ctx, params).Execute()
	return err
}

type GetLDAPConfigurationOperation interface {
	GetLDAPConfiguration (*atlasv2.GetLDAPConfigurationApiParams) (*atlasv2.UserSecurity, error)
}

// GetLDAPConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) GetLDAPConfiguration(params *atlasv2.GetLDAPConfigurationApiParams) (*atlasv2.UserSecurity, error) {
	result, _, err := s.clientv2.LDAPConfigurationApi.GetLDAPConfigurationWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetLDAPConfigurationStatusOperation interface {
	GetLDAPConfigurationStatus (*atlasv2.GetLDAPConfigurationStatusApiParams) (*atlasv2.NDSLDAPVerifyConnectivityJobRequest, error)
}

// GetLDAPConfigurationStatus encapsulates the logic to manage different cloud providers.
func (s *Store) GetLDAPConfigurationStatus(params *atlasv2.GetLDAPConfigurationStatusApiParams) (*atlasv2.NDSLDAPVerifyConnectivityJobRequest, error) {
	result, _, err := s.clientv2.LDAPConfigurationApi.GetLDAPConfigurationStatusWithParams(s.ctx, params).Execute()
	return &result, err
}

type SaveLDAPConfigurationOperation interface {
	SaveLDAPConfiguration (*atlasv2.SaveLDAPConfigurationApiParams) (*atlasv2.UserSecurity, error)
}

// SaveLDAPConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) SaveLDAPConfiguration(params *atlasv2.SaveLDAPConfigurationApiParams) (*atlasv2.UserSecurity, error) {
	result, _, err := s.clientv2.LDAPConfigurationApi.SaveLDAPConfigurationWithParams(s.ctx, params).Execute()
	return &result, err
}

type VerifyLDAPConfigurationOperation interface {
	VerifyLDAPConfiguration (*atlasv2.VerifyLDAPConfigurationApiParams) (*atlasv2.NDSLDAPVerifyConnectivityJobRequest, error)
}

// VerifyLDAPConfiguration encapsulates the logic to manage different cloud providers.
func (s *Store) VerifyLDAPConfiguration(params *atlasv2.VerifyLDAPConfigurationApiParams) (*atlasv2.NDSLDAPVerifyConnectivityJobRequest, error) {
	result, _, err := s.clientv2.LDAPConfigurationApi.VerifyLDAPConfigurationWithParams(s.ctx, params).Execute()
	return &result, err
}


// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_projects_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreateProjectOperation, CreateProjectInvitationOperation, DeleteProjectOperation, DeleteProjectInvitationOperation, DeleteProjectLimitOperation, GetProjectOperation, GetProjectByNameOperation, GetProjectInvitationOperation, GetProjectLimitOperation, GetProjectSettingsOperation, ListProjectInvitationsOperation, ListProjectLimitsOperation, ListProjectUsersOperation, ListProjectsOperation, RemoveProjectUserOperation, SetProjectLimitOperation, UpdateProjectOperation, UpdateProjectInvitationOperation, UpdateProjectInvitationByIdOperation, UpdateProjectSettingsOperation

type CreateProjectOperation interface {
	CreateProject (*atlasv2.CreateProjectApiParams) (*atlasv2.Group, error)
}

// CreateProject encapsulates the logic to manage different cloud providers.
func (s *Store) CreateProject(params *atlasv2.CreateProjectApiParams) (*atlasv2.Group, error) {
	result, _, err := s.clientv2.ProjectsApi.CreateProjectWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateProjectInvitationOperation interface {
	CreateProjectInvitation (*atlasv2.CreateProjectInvitationApiParams) (*atlasv2.GroupInvitation, error)
}

// CreateProjectInvitation encapsulates the logic to manage different cloud providers.
func (s *Store) CreateProjectInvitation(params *atlasv2.CreateProjectInvitationApiParams) (*atlasv2.GroupInvitation, error) {
	result, _, err := s.clientv2.ProjectsApi.CreateProjectInvitationWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteProjectOperation interface {
	DeleteProject (*atlasv2.DeleteProjectApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteProject encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteProject(params *atlasv2.DeleteProjectApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProjectsApi.DeleteProjectWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteProjectInvitationOperation interface {
	DeleteProjectInvitation (*atlasv2.DeleteProjectInvitationApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteProjectInvitation encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteProjectInvitation(params *atlasv2.DeleteProjectInvitationApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProjectsApi.DeleteProjectInvitationWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteProjectLimitOperation interface {
	DeleteProjectLimit (*atlasv2.DeleteProjectLimitApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteProjectLimit encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteProjectLimit(params *atlasv2.DeleteProjectLimitApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProjectsApi.DeleteProjectLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetProjectOperation interface {
	GetProject (*atlasv2.GetProjectApiParams) (*atlasv2.Group, error)
}

// GetProject encapsulates the logic to manage different cloud providers.
func (s *Store) GetProject(params *atlasv2.GetProjectApiParams) (*atlasv2.Group, error) {
	result, _, err := s.clientv2.ProjectsApi.GetProjectWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetProjectByNameOperation interface {
	GetProjectByName (*atlasv2.GetProjectByNameApiParams) (*atlasv2.Group, error)
}

// GetProjectByName encapsulates the logic to manage different cloud providers.
func (s *Store) GetProjectByName(params *atlasv2.GetProjectByNameApiParams) (*atlasv2.Group, error) {
	result, _, err := s.clientv2.ProjectsApi.GetProjectByNameWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetProjectInvitationOperation interface {
	GetProjectInvitation (*atlasv2.GetProjectInvitationApiParams) (*atlasv2.GroupInvitation, error)
}

// GetProjectInvitation encapsulates the logic to manage different cloud providers.
func (s *Store) GetProjectInvitation(params *atlasv2.GetProjectInvitationApiParams) (*atlasv2.GroupInvitation, error) {
	result, _, err := s.clientv2.ProjectsApi.GetProjectInvitationWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetProjectLimitOperation interface {
	GetProjectLimit (*atlasv2.GetProjectLimitApiParams) (*atlasv2.Limit, error)
}

// GetProjectLimit encapsulates the logic to manage different cloud providers.
func (s *Store) GetProjectLimit(params *atlasv2.GetProjectLimitApiParams) (*atlasv2.Limit, error) {
	result, _, err := s.clientv2.ProjectsApi.GetProjectLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetProjectSettingsOperation interface {
	GetProjectSettings (*atlasv2.GetProjectSettingsApiParams) (*atlasv2.GroupSettings, error)
}

// GetProjectSettings encapsulates the logic to manage different cloud providers.
func (s *Store) GetProjectSettings(params *atlasv2.GetProjectSettingsApiParams) (*atlasv2.GroupSettings, error) {
	result, _, err := s.clientv2.ProjectsApi.GetProjectSettingsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectInvitationsOperation interface {
	ListProjectInvitations (*atlasv2.ListProjectInvitationsApiParams) (*atlasv2.[]GroupInvitation, error)
}

// ListProjectInvitations encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjectInvitations(params *atlasv2.ListProjectInvitationsApiParams) (*atlasv2.[]GroupInvitation, error) {
	result, _, err := s.clientv2.ProjectsApi.ListProjectInvitationsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectLimitsOperation interface {
	ListProjectLimits (*atlasv2.ListProjectLimitsApiParams) (*atlasv2.Limit, error)
}

// ListProjectLimits encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjectLimits(params *atlasv2.ListProjectLimitsApiParams) (*atlasv2.Limit, error) {
	result, _, err := s.clientv2.ProjectsApi.ListProjectLimitsWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectUsersOperation interface {
	ListProjectUsers (*atlasv2.ListProjectUsersApiParams) (*atlasv2.PaginatedApiAppUser, error)
}

// ListProjectUsers encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjectUsers(params *atlasv2.ListProjectUsersApiParams) (*atlasv2.PaginatedApiAppUser, error) {
	result, _, err := s.clientv2.ProjectsApi.ListProjectUsersWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectsOperation interface {
	ListProjects (*atlasv2.ListProjectsApiParams) (*atlasv2.PaginatedAtlasGroup, error)
}

// ListProjects encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjects(params *atlasv2.ListProjectsApiParams) (*atlasv2.PaginatedAtlasGroup, error) {
	result, _, err := s.clientv2.ProjectsApi.ListProjectsWithParams(s.ctx, params).Execute()
	return &result, err
}

type RemoveProjectUserOperation interface {
	RemoveProjectUser (*atlasv2.RemoveProjectUserApiParams) (, error)
}

// RemoveProjectUser encapsulates the logic to manage different cloud providers.
func (s *Store) RemoveProjectUser(params *atlasv2.RemoveProjectUserApiParams) (error) {
	_, err := s.clientv2.ProjectsApi.RemoveProjectUserWithParams(s.ctx, params).Execute()
	return err
}

type SetProjectLimitOperation interface {
	SetProjectLimit (*atlasv2.SetProjectLimitApiParams) (*atlasv2.Limit, error)
}

// SetProjectLimit encapsulates the logic to manage different cloud providers.
func (s *Store) SetProjectLimit(params *atlasv2.SetProjectLimitApiParams) (*atlasv2.Limit, error) {
	result, _, err := s.clientv2.ProjectsApi.SetProjectLimitWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateProjectOperation interface {
	UpdateProject (*atlasv2.UpdateProjectApiParams) (*atlasv2.Group, error)
}

// UpdateProject encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateProject(params *atlasv2.UpdateProjectApiParams) (*atlasv2.Group, error) {
	result, _, err := s.clientv2.ProjectsApi.UpdateProjectWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateProjectInvitationOperation interface {
	UpdateProjectInvitation (*atlasv2.UpdateProjectInvitationApiParams) (*atlasv2.GroupInvitation, error)
}

// UpdateProjectInvitation encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateProjectInvitation(params *atlasv2.UpdateProjectInvitationApiParams) (*atlasv2.GroupInvitation, error) {
	result, _, err := s.clientv2.ProjectsApi.UpdateProjectInvitationWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateProjectInvitationByIdOperation interface {
	UpdateProjectInvitationById (*atlasv2.UpdateProjectInvitationByIdApiParams) (*atlasv2.GroupInvitation, error)
}

// UpdateProjectInvitationById encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateProjectInvitationById(params *atlasv2.UpdateProjectInvitationByIdApiParams) (*atlasv2.GroupInvitation, error) {
	result, _, err := s.clientv2.ProjectsApi.UpdateProjectInvitationByIdWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateProjectSettingsOperation interface {
	UpdateProjectSettings (*atlasv2.UpdateProjectSettingsApiParams) (*atlasv2.GroupSettings, error)
}

// UpdateProjectSettings encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateProjectSettings(params *atlasv2.UpdateProjectSettingsApiParams) (*atlasv2.GroupSettings, error) {
	result, _, err := s.clientv2.ProjectsApi.UpdateProjectSettingsWithParams(s.ctx, params).Execute()
	return &result, err
}


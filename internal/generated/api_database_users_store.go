// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_database_users_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreateDatabaseUserOperation, DeleteDatabaseUserOperation, GetDatabaseUserOperation, ListDatabaseUsersOperation, UpdateDatabaseUserOperation

type CreateDatabaseUserOperation interface {
	CreateDatabaseUser (*atlasv2.CreateDatabaseUserApiParams) (*atlasv2.DatabaseUser, error)
}

// CreateDatabaseUser encapsulates the logic to manage different cloud providers.
func (s *Store) CreateDatabaseUser(params *atlasv2.CreateDatabaseUserApiParams) (*atlasv2.DatabaseUser, error) {
	result, _, err := s.clientv2.DatabaseUsersApi.CreateDatabaseUserWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteDatabaseUserOperation interface {
	DeleteDatabaseUser (*atlasv2.DeleteDatabaseUserApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteDatabaseUser encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteDatabaseUser(params *atlasv2.DeleteDatabaseUserApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.DatabaseUsersApi.DeleteDatabaseUserWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetDatabaseUserOperation interface {
	GetDatabaseUser (*atlasv2.GetDatabaseUserApiParams) (*atlasv2.DatabaseUser, error)
}

// GetDatabaseUser encapsulates the logic to manage different cloud providers.
func (s *Store) GetDatabaseUser(params *atlasv2.GetDatabaseUserApiParams) (*atlasv2.DatabaseUser, error) {
	result, _, err := s.clientv2.DatabaseUsersApi.GetDatabaseUserWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListDatabaseUsersOperation interface {
	ListDatabaseUsers (*atlasv2.ListDatabaseUsersApiParams) (*atlasv2.PaginatedApiAtlasDatabaseUser, error)
}

// ListDatabaseUsers encapsulates the logic to manage different cloud providers.
func (s *Store) ListDatabaseUsers(params *atlasv2.ListDatabaseUsersApiParams) (*atlasv2.PaginatedApiAtlasDatabaseUser, error) {
	result, _, err := s.clientv2.DatabaseUsersApi.ListDatabaseUsersWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateDatabaseUserOperation interface {
	UpdateDatabaseUser (*atlasv2.UpdateDatabaseUserApiParams) (*atlasv2.DatabaseUser, error)
}

// UpdateDatabaseUser encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateDatabaseUser(params *atlasv2.UpdateDatabaseUserApiParams) (*atlasv2.DatabaseUser, error) {
	result, _, err := s.clientv2.DatabaseUsersApi.UpdateDatabaseUserWithParams(s.ctx, params).Execute()
	return &result, err
}


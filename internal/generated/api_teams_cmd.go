// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type AddAllTeamsToProjectOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.AddAllTeamsToProjectOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *AddAllTeamsToProjectOpts) Run() error {
	params := &atlasv2.AddAllTeamsToProjectApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.AddAllTeamsToProject(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const AddAllTeamsToProjectTemplate = "<<some template>>"

func AddAllTeamsToProjectBuilder() cobra.Command {
	opts := AddAllTeamsToProjectOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), AddAllTeamsToProjectTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type AddTeamUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.AddTeamUserOperation
	orgId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *AddTeamUserOpts) Run() error {
	params := &atlasv2.AddTeamUserApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.AddTeamUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const AddTeamUserTemplate = "<<some template>>"

func AddTeamUserBuilder() cobra.Command {
	opts := AddTeamUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), AddTeamUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}
type CreateTeamOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateTeamOperation
	orgId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateTeamOpts) Run() error {
	params := &atlasv2.CreateTeamApiParams{
		OrgId: opts.orgId,
	}
	resp, _, err := opts.store.CreateTeam(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateTeamTemplate = "<<some template>>"

func CreateTeamBuilder() cobra.Command {
	opts := CreateTeamOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateTeamTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")

	return cmd
}
type DeleteTeamOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteTeamOperation
	orgId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteTeamOpts) Run() error {
	params := &atlasv2.DeleteTeamApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.DeleteTeam(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteTeamTemplate = "<<some template>>"

func DeleteTeamBuilder() cobra.Command {
	opts := DeleteTeamOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteTeamTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}
type GetTeamByIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetTeamByIdOperation
	orgId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetTeamByIdOpts) Run() error {
	params := &atlasv2.GetTeamByIdApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.GetTeamById(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetTeamByIdTemplate = "<<some template>>"

func GetTeamByIdBuilder() cobra.Command {
	opts := GetTeamByIdOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetTeamByIdTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}
type GetTeamByNameOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetTeamByNameOperation
	orgId string
	teamName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetTeamByNameOpts) Run() error {
	params := &atlasv2.GetTeamByNameApiParams{
		OrgId: opts.orgId,
		TeamName: opts.teamName,
	}
	resp, _, err := opts.store.GetTeamByName(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetTeamByNameTemplate = "<<some template>>"

func GetTeamByNameBuilder() cobra.Command {
	opts := GetTeamByNameOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetTeamByNameTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamName, "teamName", "", "usage description")

	return cmd
}
type ListOrganizationTeamsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListOrganizationTeamsOperation
	orgId string
	itemsPerPage int32
	includeCount bool
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListOrganizationTeamsOpts) Run() error {
	params := &atlasv2.ListOrganizationTeamsApiParams{
		OrgId: opts.orgId,
		ItemsPerPage: opts.itemsPerPage,
		IncludeCount: opts.includeCount,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListOrganizationTeams(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationTeamsTemplate = "<<some template>>"

func ListOrganizationTeamsBuilder() cobra.Command {
	opts := ListOrganizationTeamsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationTeamsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListProjectTeamsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListProjectTeamsOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListProjectTeamsOpts) Run() error {
	params := &atlasv2.ListProjectTeamsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListProjectTeams(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectTeamsTemplate = "<<some template>>"

func ListProjectTeamsBuilder() cobra.Command {
	opts := ListProjectTeamsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectTeamsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListTeamUsersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListTeamUsersOperation
	orgId string
	teamId string
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListTeamUsersOpts) Run() error {
	params := &atlasv2.ListTeamUsersApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListTeamUsers(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListTeamUsersTemplate = "<<some template>>"

func ListTeamUsersBuilder() cobra.Command {
	opts := ListTeamUsersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListTeamUsersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type RemoveProjectTeamOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RemoveProjectTeamOperation
	groupId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RemoveProjectTeamOpts) Run() error {
	params := &atlasv2.RemoveProjectTeamApiParams{
		GroupId: opts.groupId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.RemoveProjectTeam(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const RemoveProjectTeamTemplate = "<<some template>>"

func RemoveProjectTeamBuilder() cobra.Command {
	opts := RemoveProjectTeamOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveProjectTeamTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}
type RemoveTeamUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RemoveTeamUserOperation
	orgId string
	teamId string
	userId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RemoveTeamUserOpts) Run() error {
	params := &atlasv2.RemoveTeamUserApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
		UserId: opts.userId,
	}
	_, err := opts.store.RemoveTeamUser(params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const RemoveTeamUserTemplate = "<<some template>>"

func RemoveTeamUserBuilder() cobra.Command {
	opts := RemoveTeamUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RemoveTeamUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")
	cmd.Flags().StringVar(&opts.userId, "userId", "", "usage description")

	return cmd
}
type RenameTeamOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.RenameTeamOperation
	orgId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *RenameTeamOpts) Run() error {
	params := &atlasv2.RenameTeamApiParams{
		OrgId: opts.orgId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.RenameTeam(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const RenameTeamTemplate = "<<some template>>"

func RenameTeamBuilder() cobra.Command {
	opts := RenameTeamOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), RenameTeamTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}
type UpdateTeamRolesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateTeamRolesOperation
	groupId string
	teamId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateTeamRolesOpts) Run() error {
	params := &atlasv2.UpdateTeamRolesApiParams{
		GroupId: opts.groupId,
		TeamId: opts.teamId,
	}
	resp, _, err := opts.store.UpdateTeamRoles(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateTeamRolesTemplate = "<<some template>>"

func UpdateTeamRolesBuilder() cobra.Command {
	opts := UpdateTeamRolesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateTeamRolesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.teamId, "teamId", "", "usage description")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CancelBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CancelBackupRestoreJobOperation
	groupId string
	clusterName string
	restoreJobId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CancelBackupRestoreJobOpts) Run() error {
	params := &atlasv2.CancelBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		RestoreJobId: opts.restoreJobId,
	}
	resp, _, err := opts.store.CancelBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CancelBackupRestoreJobTemplate = "<<some template>>"

func CancelBackupRestoreJobBuilder() cobra.Command {
	opts := CancelBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CancelBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.restoreJobId, "restoreJobId", "", "usage description")

	return cmd
}
type CreateBackupExportJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateBackupExportJobOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateBackupExportJobOpts) Run() error {
	params := &atlasv2.CreateBackupExportJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.CreateBackupExportJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateBackupExportJobTemplate = "<<some template>>"

func CreateBackupExportJobBuilder() cobra.Command {
	opts := CreateBackupExportJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateBackupExportJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type CreateBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateBackupRestoreJobOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateBackupRestoreJobOpts) Run() error {
	params := &atlasv2.CreateBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.CreateBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateBackupRestoreJobTemplate = "<<some template>>"

func CreateBackupRestoreJobBuilder() cobra.Command {
	opts := CreateBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type CreateExportBucketOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateExportBucketOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateExportBucketOpts) Run() error {
	params := &atlasv2.CreateExportBucketApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateExportBucket(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateExportBucketTemplate = "<<some template>>"

func CreateExportBucketBuilder() cobra.Command {
	opts := CreateExportBucketOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateExportBucketTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type CreateServerlessBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateServerlessBackupRestoreJobOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateServerlessBackupRestoreJobOpts) Run() error {
	params := &atlasv2.CreateServerlessBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.CreateServerlessBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateServerlessBackupRestoreJobTemplate = "<<some template>>"

func CreateServerlessBackupRestoreJobBuilder() cobra.Command {
	opts := CreateServerlessBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateServerlessBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type DeleteAllBackupSchedulesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteAllBackupSchedulesOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteAllBackupSchedulesOpts) Run() error {
	params := &atlasv2.DeleteAllBackupSchedulesApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.DeleteAllBackupSchedules(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteAllBackupSchedulesTemplate = "<<some template>>"

func DeleteAllBackupSchedulesBuilder() cobra.Command {
	opts := DeleteAllBackupSchedulesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteAllBackupSchedulesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type DeleteExportBucketOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteExportBucketOperation
	groupId string
	exportBucketId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteExportBucketOpts) Run() error {
	params := &atlasv2.DeleteExportBucketApiParams{
		GroupId: opts.groupId,
		ExportBucketId: opts.exportBucketId,
	}
	resp, _, err := opts.store.DeleteExportBucket(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteExportBucketTemplate = "<<some template>>"

func DeleteExportBucketBuilder() cobra.Command {
	opts := DeleteExportBucketOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteExportBucketTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.exportBucketId, "exportBucketId", "", "usage description")

	return cmd
}
type DeleteReplicaSetBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteReplicaSetBackupOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteReplicaSetBackupOpts) Run() error {
	params := &atlasv2.DeleteReplicaSetBackupApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.DeleteReplicaSetBackup(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteReplicaSetBackupTemplate = "<<some template>>"

func DeleteReplicaSetBackupBuilder() cobra.Command {
	opts := DeleteReplicaSetBackupOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteReplicaSetBackupTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type DeleteShardedClusterBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteShardedClusterBackupOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteShardedClusterBackupOpts) Run() error {
	params := &atlasv2.DeleteShardedClusterBackupApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.DeleteShardedClusterBackup(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteShardedClusterBackupTemplate = "<<some template>>"

func DeleteShardedClusterBackupBuilder() cobra.Command {
	opts := DeleteShardedClusterBackupOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteShardedClusterBackupTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type GetBackupExportJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetBackupExportJobOperation
	groupId string
	clusterName string
	exportId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetBackupExportJobOpts) Run() error {
	params := &atlasv2.GetBackupExportJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		ExportId: opts.exportId,
	}
	resp, _, err := opts.store.GetBackupExportJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetBackupExportJobTemplate = "<<some template>>"

func GetBackupExportJobBuilder() cobra.Command {
	opts := GetBackupExportJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetBackupExportJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.exportId, "exportId", "", "usage description")

	return cmd
}
type GetBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetBackupRestoreJobOperation
	groupId string
	clusterName string
	restoreJobId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetBackupRestoreJobOpts) Run() error {
	params := &atlasv2.GetBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		RestoreJobId: opts.restoreJobId,
	}
	resp, _, err := opts.store.GetBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetBackupRestoreJobTemplate = "<<some template>>"

func GetBackupRestoreJobBuilder() cobra.Command {
	opts := GetBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.restoreJobId, "restoreJobId", "", "usage description")

	return cmd
}
type GetBackupScheduleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetBackupScheduleOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetBackupScheduleOpts) Run() error {
	params := &atlasv2.GetBackupScheduleApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.GetBackupSchedule(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetBackupScheduleTemplate = "<<some template>>"

func GetBackupScheduleBuilder() cobra.Command {
	opts := GetBackupScheduleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetBackupScheduleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type GetDataProtectionSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetDataProtectionSettingsOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetDataProtectionSettingsOpts) Run() error {
	params := &atlasv2.GetDataProtectionSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.GetDataProtectionSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDataProtectionSettingsTemplate = "<<some template>>"

func GetDataProtectionSettingsBuilder() cobra.Command {
	opts := GetDataProtectionSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDataProtectionSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type GetExportBucketOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetExportBucketOperation
	groupId string
	exportBucketId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetExportBucketOpts) Run() error {
	params := &atlasv2.GetExportBucketApiParams{
		GroupId: opts.groupId,
		ExportBucketId: opts.exportBucketId,
	}
	resp, _, err := opts.store.GetExportBucket(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetExportBucketTemplate = "<<some template>>"

func GetExportBucketBuilder() cobra.Command {
	opts := GetExportBucketOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetExportBucketTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.exportBucketId, "exportBucketId", "", "usage description")

	return cmd
}
type GetReplicaSetBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetReplicaSetBackupOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetReplicaSetBackupOpts) Run() error {
	params := &atlasv2.GetReplicaSetBackupApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.GetReplicaSetBackup(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetReplicaSetBackupTemplate = "<<some template>>"

func GetReplicaSetBackupBuilder() cobra.Command {
	opts := GetReplicaSetBackupOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetReplicaSetBackupTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type GetServerlessBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetServerlessBackupOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetServerlessBackupOpts) Run() error {
	params := &atlasv2.GetServerlessBackupApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.GetServerlessBackup(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetServerlessBackupTemplate = "<<some template>>"

func GetServerlessBackupBuilder() cobra.Command {
	opts := GetServerlessBackupOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetServerlessBackupTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type GetServerlessBackupRestoreJobOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetServerlessBackupRestoreJobOperation
	groupId string
	clusterName string
	restoreJobId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetServerlessBackupRestoreJobOpts) Run() error {
	params := &atlasv2.GetServerlessBackupRestoreJobApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		RestoreJobId: opts.restoreJobId,
	}
	resp, _, err := opts.store.GetServerlessBackupRestoreJob(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetServerlessBackupRestoreJobTemplate = "<<some template>>"

func GetServerlessBackupRestoreJobBuilder() cobra.Command {
	opts := GetServerlessBackupRestoreJobOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetServerlessBackupRestoreJobTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.restoreJobId, "restoreJobId", "", "usage description")

	return cmd
}
type GetShardedClusterBackupOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetShardedClusterBackupOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetShardedClusterBackupOpts) Run() error {
	params := &atlasv2.GetShardedClusterBackupApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.GetShardedClusterBackup(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetShardedClusterBackupTemplate = "<<some template>>"

func GetShardedClusterBackupBuilder() cobra.Command {
	opts := GetShardedClusterBackupOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetShardedClusterBackupTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}
type ListBackupExportJobsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListBackupExportJobsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListBackupExportJobsOpts) Run() error {
	params := &atlasv2.ListBackupExportJobsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListBackupExportJobs(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListBackupExportJobsTemplate = "<<some template>>"

func ListBackupExportJobsBuilder() cobra.Command {
	opts := ListBackupExportJobsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListBackupExportJobsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListBackupRestoreJobsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListBackupRestoreJobsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListBackupRestoreJobsOpts) Run() error {
	params := &atlasv2.ListBackupRestoreJobsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListBackupRestoreJobs(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListBackupRestoreJobsTemplate = "<<some template>>"

func ListBackupRestoreJobsBuilder() cobra.Command {
	opts := ListBackupRestoreJobsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListBackupRestoreJobsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListExportBucketsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListExportBucketsOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListExportBucketsOpts) Run() error {
	params := &atlasv2.ListExportBucketsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListExportBuckets(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListExportBucketsTemplate = "<<some template>>"

func ListExportBucketsBuilder() cobra.Command {
	opts := ListExportBucketsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListExportBucketsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListReplicaSetBackupsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListReplicaSetBackupsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListReplicaSetBackupsOpts) Run() error {
	params := &atlasv2.ListReplicaSetBackupsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListReplicaSetBackups(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListReplicaSetBackupsTemplate = "<<some template>>"

func ListReplicaSetBackupsBuilder() cobra.Command {
	opts := ListReplicaSetBackupsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListReplicaSetBackupsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListServerlessBackupRestoreJobsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListServerlessBackupRestoreJobsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListServerlessBackupRestoreJobsOpts) Run() error {
	params := &atlasv2.ListServerlessBackupRestoreJobsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListServerlessBackupRestoreJobs(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListServerlessBackupRestoreJobsTemplate = "<<some template>>"

func ListServerlessBackupRestoreJobsBuilder() cobra.Command {
	opts := ListServerlessBackupRestoreJobsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListServerlessBackupRestoreJobsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListServerlessBackupsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListServerlessBackupsOperation
	groupId string
	clusterName string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListServerlessBackupsOpts) Run() error {
	params := &atlasv2.ListServerlessBackupsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListServerlessBackups(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListServerlessBackupsTemplate = "<<some template>>"

func ListServerlessBackupsBuilder() cobra.Command {
	opts := ListServerlessBackupsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListServerlessBackupsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListShardedClusterBackupsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListShardedClusterBackupsOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListShardedClusterBackupsOpts) Run() error {
	params := &atlasv2.ListShardedClusterBackupsApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.ListShardedClusterBackups(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListShardedClusterBackupsTemplate = "<<some template>>"

func ListShardedClusterBackupsBuilder() cobra.Command {
	opts := ListShardedClusterBackupsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListShardedClusterBackupsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type TakeSnapshotOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.TakeSnapshotOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *TakeSnapshotOpts) Run() error {
	params := &atlasv2.TakeSnapshotApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.TakeSnapshot(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const TakeSnapshotTemplate = "<<some template>>"

func TakeSnapshotBuilder() cobra.Command {
	opts := TakeSnapshotOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), TakeSnapshotTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type UpdateBackupScheduleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateBackupScheduleOperation
	groupId string
	clusterName string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateBackupScheduleOpts) Run() error {
	params := &atlasv2.UpdateBackupScheduleApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
	}
	resp, _, err := opts.store.UpdateBackupSchedule(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateBackupScheduleTemplate = "<<some template>>"

func UpdateBackupScheduleBuilder() cobra.Command {
	opts := UpdateBackupScheduleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateBackupScheduleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")

	return cmd
}
type UpdateDataProtectionSettingsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateDataProtectionSettingsOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateDataProtectionSettingsOpts) Run() error {
	params := &atlasv2.UpdateDataProtectionSettingsApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.UpdateDataProtectionSettings(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateDataProtectionSettingsTemplate = "<<some template>>"

func UpdateDataProtectionSettingsBuilder() cobra.Command {
	opts := UpdateDataProtectionSettingsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateDataProtectionSettingsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type UpdateSnapshotRetentionOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateSnapshotRetentionOperation
	groupId string
	clusterName string
	snapshotId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateSnapshotRetentionOpts) Run() error {
	params := &atlasv2.UpdateSnapshotRetentionApiParams{
		GroupId: opts.groupId,
		ClusterName: opts.clusterName,
		SnapshotId: opts.snapshotId,
	}
	resp, _, err := opts.store.UpdateSnapshotRetention(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateSnapshotRetentionTemplate = "<<some template>>"

func UpdateSnapshotRetentionBuilder() cobra.Command {
	opts := UpdateSnapshotRetentionOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateSnapshotRetentionTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterName, "clusterName", "", "usage description")
	cmd.Flags().StringVar(&opts.snapshotId, "snapshotId", "", "usage description")

	return cmd
}

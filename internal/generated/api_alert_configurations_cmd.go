// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
}

func (opts *CreateAlertConfigurationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.CreateAlertConfigurationApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.CreateAlertConfigurationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateAlertConfigurationTemplate = "<<some template>>"

func CreateAlertConfigurationBuilder() cobra.Command {
	opts := CreateAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateAlertConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")

	return cmd
}
type DeleteAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *DeleteAlertConfigurationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.DeleteAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	_, err := opts.client.AlertConfigurationsApi.DeleteAlertConfigurationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DeleteAlertConfigurationTemplate = "<<some template>>"

func DeleteAlertConfigurationBuilder() cobra.Command {
	opts := DeleteAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteAlertConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", "usage description")
	_ = cmd.MarkFlagRequired("alertConfigId")

	return cmd
}
type GetAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *GetAlertConfigurationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.GetAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.GetAlertConfigurationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetAlertConfigurationTemplate = "<<some template>>"

func GetAlertConfigurationBuilder() cobra.Command {
	opts := GetAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetAlertConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", "usage description")
	_ = cmd.MarkFlagRequired("alertConfigId")

	return cmd
}
type ListAlertConfigurationMatchersFieldNamesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
}

func (opts *ListAlertConfigurationMatchersFieldNamesOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListAlertConfigurationMatchersFieldNamesOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationMatchersFieldNamesApiParams{
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationMatchersFieldNamesWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAlertConfigurationMatchersFieldNamesTemplate = "<<some template>>"

func ListAlertConfigurationMatchersFieldNamesBuilder() cobra.Command {
	opts := ListAlertConfigurationMatchersFieldNamesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAlertConfigurationMatchersFieldNamesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}

	return cmd
}
type ListAlertConfigurationsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListAlertConfigurationsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListAlertConfigurationsOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAlertConfigurationsTemplate = "<<some template>>"

func ListAlertConfigurationsBuilder() cobra.Command {
	opts := ListAlertConfigurationsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAlertConfigurationsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ListAlertConfigurationsByAlertIdOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	alertId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListAlertConfigurationsByAlertIdOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListAlertConfigurationsByAlertIdOpts) Run(ctx context.Context) error {
	params := &admin.ListAlertConfigurationsByAlertIdApiParams{
		GroupId: opts.groupId,
		AlertId: opts.alertId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ListAlertConfigurationsByAlertIdWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListAlertConfigurationsByAlertIdTemplate = "<<some template>>"

func ListAlertConfigurationsByAlertIdBuilder() cobra.Command {
	opts := ListAlertConfigurationsByAlertIdOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListAlertConfigurationsByAlertIdTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.alertId, "alertId", "", "usage description")
	_ = cmd.MarkFlagRequired("alertId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type ToggleAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *ToggleAlertConfigurationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ToggleAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.ToggleAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.ToggleAlertConfigurationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ToggleAlertConfigurationTemplate = "<<some template>>"

func ToggleAlertConfigurationBuilder() cobra.Command {
	opts := ToggleAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ToggleAlertConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", "usage description")
	_ = cmd.MarkFlagRequired("alertConfigId")

	return cmd
}
type UpdateAlertConfigurationOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	alertConfigId string
}

func (opts *UpdateAlertConfigurationOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateAlertConfigurationOpts) Run(ctx context.Context) error {
	params := &admin.UpdateAlertConfigurationApiParams{
		GroupId: opts.groupId,
		AlertConfigId: opts.alertConfigId,
	}
	resp, _, err := opts.client.AlertConfigurationsApi.UpdateAlertConfigurationWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateAlertConfigurationTemplate = "<<some template>>"

func UpdateAlertConfigurationBuilder() cobra.Command {
	opts := UpdateAlertConfigurationOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateAlertConfigurationTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.alertConfigId, "alertConfigId", "", "usage description")
	_ = cmd.MarkFlagRequired("alertConfigId")

	return cmd
}

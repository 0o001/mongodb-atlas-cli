// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type AuthorizeCloudProviderAccessRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.AuthorizeCloudProviderAccessRoleOperation
	groupId string
	roleId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *AuthorizeCloudProviderAccessRoleOpts) Run() error {
	params := &atlasv2.AuthorizeCloudProviderAccessRoleApiParams{
		GroupId: opts.groupId,
		RoleId: opts.roleId,
	}
	resp, _, err := opts.store.AuthorizeCloudProviderAccessRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const AuthorizeCloudProviderAccessRoleTemplate = "<<some template>>"

func AuthorizeCloudProviderAccessRoleBuilder() cobra.Command {
	opts := AuthorizeCloudProviderAccessRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), AuthorizeCloudProviderAccessRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.roleId, "roleId", "", "usage description")

	return cmd
}
type CreateCloudProviderAccessRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateCloudProviderAccessRoleOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateCloudProviderAccessRoleOpts) Run() error {
	params := &atlasv2.CreateCloudProviderAccessRoleApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateCloudProviderAccessRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateCloudProviderAccessRoleTemplate = "<<some template>>"

func CreateCloudProviderAccessRoleBuilder() cobra.Command {
	opts := CreateCloudProviderAccessRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateCloudProviderAccessRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeauthorizeCloudProviderAccessRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeauthorizeCloudProviderAccessRoleOperation
	groupId string
	cloudProvider string
	roleId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeauthorizeCloudProviderAccessRoleOpts) Run() error {
	params := &atlasv2.DeauthorizeCloudProviderAccessRoleApiParams{
		GroupId: opts.groupId,
		CloudProvider: opts.cloudProvider,
		RoleId: opts.roleId,
	}
	_, err := opts.store.DeauthorizeCloudProviderAccessRole(params)
	if err != nil {
		return err
	}

	return opts.Print(nil)
}

const DeauthorizeCloudProviderAccessRoleTemplate = "<<some template>>"

func DeauthorizeCloudProviderAccessRoleBuilder() cobra.Command {
	opts := DeauthorizeCloudProviderAccessRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeauthorizeCloudProviderAccessRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.cloudProvider, "cloudProvider", "", "usage description")
	cmd.Flags().StringVar(&opts.roleId, "roleId", "", "usage description")

	return cmd
}
type GetCloudProviderAccessRoleOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetCloudProviderAccessRoleOperation
	groupId string
	roleId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetCloudProviderAccessRoleOpts) Run() error {
	params := &atlasv2.GetCloudProviderAccessRoleApiParams{
		GroupId: opts.groupId,
		RoleId: opts.roleId,
	}
	resp, _, err := opts.store.GetCloudProviderAccessRole(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetCloudProviderAccessRoleTemplate = "<<some template>>"

func GetCloudProviderAccessRoleBuilder() cobra.Command {
	opts := GetCloudProviderAccessRoleOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetCloudProviderAccessRoleTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.roleId, "roleId", "", "usage description")

	return cmd
}
type ListCloudProviderAccessRolesOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListCloudProviderAccessRolesOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListCloudProviderAccessRolesOpts) Run() error {
	params := &atlasv2.ListCloudProviderAccessRolesApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.ListCloudProviderAccessRoles(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListCloudProviderAccessRolesTemplate = "<<some template>>"

func ListCloudProviderAccessRolesBuilder() cobra.Command {
	opts := ListCloudProviderAccessRolesOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListCloudProviderAccessRolesTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}

// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_programmatic_api_keys_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas AddProjectApiKeyOperation, CreateApiKeyOperation, CreateApiKeyAccessListOperation, CreateProjectApiKeyOperation, DeleteApiKeyOperation, DeleteApiKeyAccessListEntryOperation, GetApiKeyOperation, GetApiKeyAccessListOperation, ListApiKeyAccessListsEntriesOperation, ListApiKeysOperation, ListProjectApiKeysOperation, RemoveProjectApiKeyOperation, UpdateApiKeyOperation, UpdateApiKeyRolesOperation

type AddProjectApiKeyOperation interface {
	AddProjectApiKey (*atlasv2.AddProjectApiKeyApiParams) (*atlasv2.ApiUser, error)
}

// AddProjectApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) AddProjectApiKey(params *atlasv2.AddProjectApiKeyApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.AddProjectApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateApiKeyOperation interface {
	CreateApiKey (*atlasv2.CreateApiKeyApiParams) (*atlasv2.ApiUser, error)
}

// CreateApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) CreateApiKey(params *atlasv2.CreateApiKeyApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.CreateApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateApiKeyAccessListOperation interface {
	CreateApiKeyAccessList (*atlasv2.CreateApiKeyAccessListApiParams) (*atlasv2.UserAccessList, error)
}

// CreateApiKeyAccessList encapsulates the logic to manage different cloud providers.
func (s *Store) CreateApiKeyAccessList(params *atlasv2.CreateApiKeyAccessListApiParams) (*atlasv2.UserAccessList, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.CreateApiKeyAccessListWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateProjectApiKeyOperation interface {
	CreateProjectApiKey (*atlasv2.CreateProjectApiKeyApiParams) (*atlasv2.ApiUser, error)
}

// CreateProjectApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) CreateProjectApiKey(params *atlasv2.CreateProjectApiKeyApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.CreateProjectApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteApiKeyOperation interface {
	DeleteApiKey (*atlasv2.DeleteApiKeyApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteApiKey(params *atlasv2.DeleteApiKeyApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.DeleteApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteApiKeyAccessListEntryOperation interface {
	DeleteApiKeyAccessListEntry (*atlasv2.DeleteApiKeyAccessListEntryApiParams) (*atlasv2.map[string]interface{}, error)
}

// DeleteApiKeyAccessListEntry encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteApiKeyAccessListEntry(params *atlasv2.DeleteApiKeyAccessListEntryApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.DeleteApiKeyAccessListEntryWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetApiKeyOperation interface {
	GetApiKey (*atlasv2.GetApiKeyApiParams) (*atlasv2.ApiUser, error)
}

// GetApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) GetApiKey(params *atlasv2.GetApiKeyApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.GetApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetApiKeyAccessListOperation interface {
	GetApiKeyAccessList (*atlasv2.GetApiKeyAccessListApiParams) (*atlasv2.UserAccessList, error)
}

// GetApiKeyAccessList encapsulates the logic to manage different cloud providers.
func (s *Store) GetApiKeyAccessList(params *atlasv2.GetApiKeyAccessListApiParams) (*atlasv2.UserAccessList, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.GetApiKeyAccessListWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListApiKeyAccessListsEntriesOperation interface {
	ListApiKeyAccessListsEntries (*atlasv2.ListApiKeyAccessListsEntriesApiParams) (*atlasv2.PaginatedApiUserAccessList, error)
}

// ListApiKeyAccessListsEntries encapsulates the logic to manage different cloud providers.
func (s *Store) ListApiKeyAccessListsEntries(params *atlasv2.ListApiKeyAccessListsEntriesApiParams) (*atlasv2.PaginatedApiUserAccessList, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.ListApiKeyAccessListsEntriesWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListApiKeysOperation interface {
	ListApiKeys (*atlasv2.ListApiKeysApiParams) (*atlasv2.PaginatedApiApiUser, error)
}

// ListApiKeys encapsulates the logic to manage different cloud providers.
func (s *Store) ListApiKeys(params *atlasv2.ListApiKeysApiParams) (*atlasv2.PaginatedApiApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.ListApiKeysWithParams(s.ctx, params).Execute()
	return &result, err
}

type ListProjectApiKeysOperation interface {
	ListProjectApiKeys (*atlasv2.ListProjectApiKeysApiParams) (*atlasv2.PaginatedApiApiUser, error)
}

// ListProjectApiKeys encapsulates the logic to manage different cloud providers.
func (s *Store) ListProjectApiKeys(params *atlasv2.ListProjectApiKeysApiParams) (*atlasv2.PaginatedApiApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.ListProjectApiKeysWithParams(s.ctx, params).Execute()
	return &result, err
}

type RemoveProjectApiKeyOperation interface {
	RemoveProjectApiKey (*atlasv2.RemoveProjectApiKeyApiParams) (*atlasv2.map[string]interface{}, error)
}

// RemoveProjectApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) RemoveProjectApiKey(params *atlasv2.RemoveProjectApiKeyApiParams) (*atlasv2.map[string]interface{}, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.RemoveProjectApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateApiKeyOperation interface {
	UpdateApiKey (*atlasv2.UpdateApiKeyApiParams) (*atlasv2.ApiUser, error)
}

// UpdateApiKey encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateApiKey(params *atlasv2.UpdateApiKeyApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.UpdateApiKeyWithParams(s.ctx, params).Execute()
	return &result, err
}

type UpdateApiKeyRolesOperation interface {
	UpdateApiKeyRoles (*atlasv2.UpdateApiKeyRolesApiParams) (*atlasv2.ApiUser, error)
}

// UpdateApiKeyRoles encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateApiKeyRoles(params *atlasv2.UpdateApiKeyRolesApiParams) (*atlasv2.ApiUser, error) {
	result, _, err := s.clientv2.ProgrammaticAPIKeysApi.UpdateApiKeyRolesWithParams(s.ctx, params).Execute()
	return &result, err
}


// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type GetOrganizationEventOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	orgId string
	eventId string
	includeRaw bool
}

func (opts *GetOrganizationEventOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetOrganizationEventOpts) Run(ctx context.Context) error {
	params := &admin.GetOrganizationEventApiParams{
		OrgId: opts.orgId,
		EventId: opts.eventId,
		IncludeRaw: opts.includeRaw,
	}
	resp, _, err := opts.client.EventsApi.GetOrganizationEventWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetOrganizationEventTemplate = "<<some template>>"

func GetOrganizationEventBuilder() cobra.Command {
	opts := GetOrganizationEventOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetOrganizationEventTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")
	cmd.Flags().StringVar(&opts.eventId, "eventId", "", "usage description")
	_ = cmd.MarkFlagRequired("eventId")
	cmd.Flags().StringVar(&opts.includeRaw, "includeRaw", "", "usage description")

	return cmd
}
type GetProjectEventOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	eventId string
	includeRaw bool
}

func (opts *GetProjectEventOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetProjectEventOpts) Run(ctx context.Context) error {
	params := &admin.GetProjectEventApiParams{
		GroupId: opts.groupId,
		EventId: opts.eventId,
		IncludeRaw: opts.includeRaw,
	}
	resp, _, err := opts.client.EventsApi.GetProjectEventWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetProjectEventTemplate = "<<some template>>"

func GetProjectEventBuilder() cobra.Command {
	opts := GetProjectEventOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetProjectEventTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.eventId, "eventId", "", "usage description")
	_ = cmd.MarkFlagRequired("eventId")
	cmd.Flags().StringVar(&opts.includeRaw, "includeRaw", "", "usage description")

	return cmd
}
type ListOrganizationEventsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	orgId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	eventType []map[string]interface{}
	includeRaw bool
	maxDate time.Time
	minDate time.Time
}

func (opts *ListOrganizationEventsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListOrganizationEventsOpts) Run(ctx context.Context) error {
	params := &admin.ListOrganizationEventsApiParams{
		OrgId: opts.orgId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		EventType: opts.eventType,
		IncludeRaw: opts.includeRaw,
		MaxDate: opts.maxDate,
		MinDate: opts.minDate,
	}
	resp, _, err := opts.client.EventsApi.ListOrganizationEventsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListOrganizationEventsTemplate = "<<some template>>"

func ListOrganizationEventsBuilder() cobra.Command {
	opts := ListOrganizationEventsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListOrganizationEventsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.orgId, "orgId", "", "usage description")
	_ = cmd.MarkFlagRequired("orgId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.eventType, "eventType", "", "usage description")
	cmd.Flags().StringVar(&opts.includeRaw, "includeRaw", "", "usage description")
	cmd.Flags().StringVar(&opts.maxDate, "maxDate", "", "usage description")
	cmd.Flags().StringVar(&opts.minDate, "minDate", "", "usage description")

	return cmd
}
type ListProjectEventsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client admin.APIClient
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
	clusterNames []string
	eventType EventTypeForNdsGroup
	includeRaw bool
	maxDate time.Time
	minDate time.Time
}

func (opts *ListProjectEventsOpts) initClient(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListProjectEventsOpts) Run(ctx context.Context) error {
	params := &admin.ListProjectEventsApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
		ClusterNames: opts.clusterNames,
		EventType: opts.eventType,
		IncludeRaw: opts.includeRaw,
		MaxDate: opts.maxDate,
		MinDate: opts.minDate,
	}
	resp, _, err := opts.client.EventsApi.ListProjectEventsWithParams(ctx, params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListProjectEventsTemplate = "<<some template>>"

func ListProjectEventsBuilder() cobra.Command {
	opts := ListProjectEventsOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListProjectEventsTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	_ = cmd.MarkFlagRequired("groupId")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")
	cmd.Flags().StringVar(&opts.clusterNames, "clusterNames", "", "usage description")
	cmd.Flags().StringVar(&opts.eventType, "eventType", "", "usage description")
	cmd.Flags().StringVar(&opts.includeRaw, "includeRaw", "", "usage description")
	cmd.Flags().StringVar(&opts.maxDate, "maxDate", "", "usage description")
	cmd.Flags().StringVar(&opts.minDate, "minDate", "", "usage description")

	return cmd
}

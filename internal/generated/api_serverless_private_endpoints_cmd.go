// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
)

type CreateServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	instanceName string
	
}

func (opts *CreateServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *CreateServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.CreateServerlessPrivateEndpointApiParams{
		GroupId: opts.groupId,
		InstanceName: opts.instanceName,
		
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.CreateServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func CreateServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := CreateServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "createServerlessPrivateEndpoint",
		// Aliases: []string{"?"},
		Short:   "Create One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", "Human-readable label that identifies the serverless instance for which the tenant endpoint will be created.")
	

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	return cmd
}
type DeleteServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	instanceName string
	endpointId string
}

func (opts *DeleteServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *DeleteServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.DeleteServerlessPrivateEndpointApiParams{
		GroupId: opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId: opts.endpointId,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.DeleteServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func DeleteServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := DeleteServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "deleteServerlessPrivateEndpoint",
		// Aliases: []string{"?"},
		Short:   "Remove One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", "Human-readable label that identifies the serverless instance from which the tenant endpoint will be removed.")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "Unique 24-hexadecimal digit string that identifies the tenant endpoint which will be removed.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}
type GetServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	instanceName string
	endpointId string
}

func (opts *GetServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *GetServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.GetServerlessPrivateEndpointApiParams{
		GroupId: opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId: opts.endpointId,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.GetServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func GetServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := GetServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "getServerlessPrivateEndpoint",
		// Aliases: []string{"?"},
		Short:   "Return One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", "Human-readable label that identifies the serverless instance associated with the tenant endpoint.")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "Unique 24-hexadecimal digit string that identifies the tenant endpoint.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}
type ListServerlessPrivateEndpointsOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	instanceName string
}

func (opts *ListServerlessPrivateEndpointsOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *ListServerlessPrivateEndpointsOpts) Run(ctx context.Context) error {
	params := &admin.ListServerlessPrivateEndpointsApiParams{
		GroupId: opts.groupId,
		InstanceName: opts.instanceName,
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.ListServerlessPrivateEndpointsWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func ListServerlessPrivateEndpointsBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := ListServerlessPrivateEndpointsOpts{}
	cmd := &cobra.Command{
		Use:     "listServerlessPrivateEndpoints",
		// Aliases: []string{"?"},
		Short:   "Return All Private Endpoints for One Serverless Instance",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", "Human-readable label that identifies the serverless instance associated with the tenant endpoint.")

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	return cmd
}
type UpdateServerlessPrivateEndpointOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	groupId string
	instanceName string
	endpointId string
	
}

func (opts *UpdateServerlessPrivateEndpointOpts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *UpdateServerlessPrivateEndpointOpts) Run(ctx context.Context) error {
	params := &admin.UpdateServerlessPrivateEndpointApiParams{
		GroupId: opts.groupId,
		InstanceName: opts.instanceName,
		EndpointId: opts.endpointId,
		
	}
	resp, _, err := opts.client.ServerlessPrivateEndpointsApi.UpdateServerlessPrivateEndpointWithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

func UpdateServerlessPrivateEndpointBuilder() *cobra.Command {
	const template = "<<some template>>"

	opts := UpdateServerlessPrivateEndpointOpts{}
	cmd := &cobra.Command{
		Use:     "updateServerlessPrivateEndpoint",
		// Aliases: []string{"?"},
		Short:   "Update One Private Endpoint for One Serverless Instance",
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")
	cmd.Flags().StringVar(&opts.instanceName, "instanceName", "", "Human-readable label that identifies the serverless instance associated with the tenant endpoint that will be updated.")
	cmd.Flags().StringVar(&opts.endpointId, "endpointId", "", "Unique 24-hexadecimal digit string that identifies the tenant endpoint which will be updated.")
	

	_ = cmd.MarkFlagRequired("groupId")
	_ = cmd.MarkFlagRequired("instanceName")
	_ = cmd.MarkFlagRequired("endpointId")
	return cmd
}

func ServerlessPrivateEndpointsBuilder() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "serverlessPrivateEndpoints",
		Short:   "Returns, adds, edits, and removes private endpoints for serverless instances. To learn more, see the Atlas Administration API tab on the following tutorial.",
	}
	cmd.AddCommand(
		CreateServerlessPrivateEndpointBuilder(),
		DeleteServerlessPrivateEndpointBuilder(),
		GetServerlessPrivateEndpointBuilder(),
		ListServerlessPrivateEndpointsBuilder(),
		UpdateServerlessPrivateEndpointBuilder(),
	)
	return cmd
}


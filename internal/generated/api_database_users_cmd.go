// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"context"
	"github.com/spf13/cobra"
	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store/atlas"
)

type CreateDatabaseUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.CreateDatabaseUserOperation
	groupId string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *CreateDatabaseUserOpts) Run() error {
	params := &atlasv2.CreateDatabaseUserApiParams{
		GroupId: opts.groupId,
	}
	resp, _, err := opts.store.CreateDatabaseUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const CreateDatabaseUserTemplate = "<<some template>>"

func CreateDatabaseUserBuilder() cobra.Command {
	opts := CreateDatabaseUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), CreateDatabaseUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")

	return cmd
}
type DeleteDatabaseUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.DeleteDatabaseUserOperation
	groupId string
	databaseName string
	username string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *DeleteDatabaseUserOpts) Run() error {
	params := &atlasv2.DeleteDatabaseUserApiParams{
		GroupId: opts.groupId,
		DatabaseName: opts.databaseName,
		Username: opts.username,
	}
	resp, _, err := opts.store.DeleteDatabaseUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const DeleteDatabaseUserTemplate = "<<some template>>"

func DeleteDatabaseUserBuilder() cobra.Command {
	opts := DeleteDatabaseUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), DeleteDatabaseUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}
type GetDatabaseUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.GetDatabaseUserOperation
	groupId string
	databaseName string
	username string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *GetDatabaseUserOpts) Run() error {
	params := &atlasv2.GetDatabaseUserApiParams{
		GroupId: opts.groupId,
		DatabaseName: opts.databaseName,
		Username: opts.username,
	}
	resp, _, err := opts.store.GetDatabaseUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const GetDatabaseUserTemplate = "<<some template>>"

func GetDatabaseUserBuilder() cobra.Command {
	opts := GetDatabaseUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), GetDatabaseUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}
type ListDatabaseUsersOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.ListDatabaseUsersOperation
	groupId string
	includeCount bool
	itemsPerPage int32
	pageNum int32
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *ListDatabaseUsersOpts) Run() error {
	params := &atlasv2.ListDatabaseUsersApiParams{
		GroupId: opts.groupId,
		IncludeCount: opts.includeCount,
		ItemsPerPage: opts.itemsPerPage,
		PageNum: opts.pageNum,
	}
	resp, _, err := opts.store.ListDatabaseUsers(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const ListDatabaseUsersTemplate = "<<some template>>"

func ListDatabaseUsersBuilder() cobra.Command {
	opts := ListDatabaseUsersOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), ListDatabaseUsersTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.includeCount, "includeCount", "", "usage description")
	cmd.Flags().StringVar(&opts.itemsPerPage, "itemsPerPage", "", "usage description")
	cmd.Flags().StringVar(&opts.pageNum, "pageNum", "", "usage description")

	return cmd
}
type UpdateDatabaseUserOpts struct {
	cli.GlobalOpts
	cli.OutputOpts
	store store.UpdateDatabaseUserOperation
	groupId string
	databaseName string
	username string
}

func (opts *ListOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *UpdateDatabaseUserOpts) Run() error {
	params := &atlasv2.UpdateDatabaseUserApiParams{
		GroupId: opts.groupId,
		DatabaseName: opts.databaseName,
		Username: opts.username,
	}
	resp, _, err := opts.store.UpdateDatabaseUser(params)
	if err != nil {
		return err
	}

	return opts.Print(resp)
}

const UpdateDatabaseUserTemplate = "<<some template>>"

func UpdateDatabaseUserBuilder() cobra.Command {
	opts := UpdateDatabaseUserOpts{}
	cmd := &cobra.Command{
		Use:     "<<use>>",
		Short:   "<<decription>>",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		// Aliases: []string{"ls"},
		Args:    require.NoArgs,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.ValidateProjectID,
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), UpdateDatabaseUserTemplate),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}
	cmd.Flags().StringVar(&opts.groupId, "groupId", "", "usage description")
	cmd.Flags().StringVar(&opts.databaseName, "databaseName", "", "usage description")
	cmd.Flags().StringVar(&opts.username, "username", "", "usage description")

	return cmd
}

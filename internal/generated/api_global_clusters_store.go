// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package store

import (
	"context"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/api_global_clusters_store_mock.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas CreateCustomZoneMappingOperation, CreateManagedNamespaceOperation, DeleteAllCustomZoneMappingsOperation, DeleteManagedNamespaceOperation, GetManagedNamespaceOperation

type CreateCustomZoneMappingOperation interface {
	CreateCustomZoneMapping (*atlasv2.CreateCustomZoneMappingApiParams) (*atlasv2.GeoSharding, error)
}

// CreateCustomZoneMapping encapsulates the logic to manage different cloud providers.
func (s *Store) CreateCustomZoneMapping(params *atlasv2.CreateCustomZoneMappingApiParams) (*atlasv2.GeoSharding, error) {
	result, _, err := s.clientv2.GlobalClustersApi.CreateCustomZoneMappingWithParams(s.ctx, params).Execute()
	return &result, err
}

type CreateManagedNamespaceOperation interface {
	CreateManagedNamespace (*atlasv2.CreateManagedNamespaceApiParams) (*atlasv2.GeoSharding, error)
}

// CreateManagedNamespace encapsulates the logic to manage different cloud providers.
func (s *Store) CreateManagedNamespace(params *atlasv2.CreateManagedNamespaceApiParams) (*atlasv2.GeoSharding, error) {
	result, _, err := s.clientv2.GlobalClustersApi.CreateManagedNamespaceWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteAllCustomZoneMappingsOperation interface {
	DeleteAllCustomZoneMappings (*atlasv2.DeleteAllCustomZoneMappingsApiParams) (*atlasv2.GeoSharding, error)
}

// DeleteAllCustomZoneMappings encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteAllCustomZoneMappings(params *atlasv2.DeleteAllCustomZoneMappingsApiParams) (*atlasv2.GeoSharding, error) {
	result, _, err := s.clientv2.GlobalClustersApi.DeleteAllCustomZoneMappingsWithParams(s.ctx, params).Execute()
	return &result, err
}

type DeleteManagedNamespaceOperation interface {
	DeleteManagedNamespace (*atlasv2.DeleteManagedNamespaceApiParams) (*atlasv2.GeoSharding, error)
}

// DeleteManagedNamespace encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteManagedNamespace(params *atlasv2.DeleteManagedNamespaceApiParams) (*atlasv2.GeoSharding, error) {
	result, _, err := s.clientv2.GlobalClustersApi.DeleteManagedNamespaceWithParams(s.ctx, params).Execute()
	return &result, err
}

type GetManagedNamespaceOperation interface {
	GetManagedNamespace (*atlasv2.GetManagedNamespaceApiParams) (*atlasv2.GeoSharding, error)
}

// GetManagedNamespace encapsulates the logic to manage different cloud providers.
func (s *Store) GetManagedNamespace(params *atlasv2.GetManagedNamespaceApiParams) (*atlasv2.GeoSharding, error) {
	result, _, err := s.clientv2.GlobalClustersApi.GetManagedNamespaceWithParams(s.ctx, params).Execute()
	return &result, err
}


{{>partial_header}}
package {{packageName}}

import (
	"context"
	"github.com/spf13/cobra"
	"go.mongodb.org/atlas-sdk/admin"
	"{{gitHost}}/{{gitUserId}}/{{gitRepoId}}/internal/cli"
)

{{#operations}}
{{#operation}}
type {{operationId}}Opts struct {
	cli.GlobalOpts
	cli.OutputOpts
	client *admin.APIClient
	{{#allParams}}
	{{^isBodyParam}}{{paramName}} {{{dataType}}}{{/isBodyParam}}
	{{/allParams}}
}

func (opts *{{operationId}}Opts) initClient() func() error {
	return func() error {
		var err error
		opts.client, err = NewClientWithAuth()
		return err
	}
}

func (opts *{{operationId}}Opts) Run(ctx context.Context) error {
	params := &admin.{{operationId}}ApiParams{
		{{#allParams}}
		{{^isBodyParam}}{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}: opts.{{paramName}},{{/isBodyParam}}
		{{/allParams}}
	}
	{{#returnType}}resp, {{/returnType}}_, err := opts.client.{{classname}}.{{operationId}}WithParams(ctx, params).Execute()
	if err != nil {
		return err
	}

	return opts.Print({{#returnType}}resp{{/returnType}}{{^returnType}}nil{{/returnType}})
}

func {{operationId}}Builder() *cobra.Command {
	const template = "<<some template>>"

	opts := {{operationId}}Opts{}
	cmd := &cobra.Command{
		Use:     "{{#lambda.camelcase}}{{operationId}}{{/lambda.camelcase}}",
		// Aliases: []string{"?"},
		Short:   "{{ summary }}",
		Long:    fmt.Sprintf(usage.RequiredRole, "Project Read Only"), // how to tell?
		Args:    require.NoArgs,
		Annotations: map[string]string{
			"output":      template,
		},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				//opts.ValidateProjectID,
				opts.initClient(),
				opts.InitOutput(cmd.OutOrStdout(), template),
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context())
		},
	}
{{#allParams}}
	{{^isBodyParam}}cmd.Flags().{{#lambda.titlecase}}{{dataType}}{{/lambda.titlecase}}Var(&opts.{{paramName}}, "{{paramName}}", {{#isString}}"{{/isString}}{{^defaultValue}}{{#isNumeric}}0{{/isNumeric}}{{#isInteger}}0{{/isInteger}}{{#isShort}}0{{/isShort}}{{#isLong}}0{{/isLong}}{{#isUnboundedInteger}}0{{/isUnboundedInteger}}{{#isNumber}}0{{/isNumber}}{{#isFloat}}0{{/isFloat}}{{#isDouble}}0{{/isDouble}}{{#isDecimal}}0{{/isDecimal}}{{#isBoolean}}false{{/isBoolean}}{{/defaultValue}}{{defaultValue}}{{#isString}}"{{/isString}}, "{{description}}"){{/isBodyParam}}
{{/allParams}}
{{#allParams}}{{^isBodyParam}}{{#required}}
	_ = cmd.MarkFlagRequired("{{paramName}}"){{/required}}{{/isBodyParam}}{{/allParams}}
	return cmd
}
{{/operation}}
{{/operations}}

func {{baseName}}Builder() *cobra.Command {
{{#operations}}
{{#operation}}
{{#-first}}
	cmd := &cobra.Command{
		Use:     "{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}",
		Short:   "{{#tags}}{{#-first}}{{description}}{{/-first}}{{/tags}}",
	}
	cmd.AddCommand(
{{/-first}}
		{{operationId}}Builder(),
{{/operation}}
{{/operations}}
	)
	return cmd
}

